// Code generated by protoc-gen-enum. DO NOT EDIT.
// source: user/user.enum.proto

package user

import (
	"errors"
	"github.com/liov/tiga/protobuf/utils/errorcode"
	"github.com/liov/tiga/utils/log"
	"github.com/liov/tiga/utils/strings"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"io"
)

func (x Action) String() string {
	switch x {
	case ActionPlaceholder:
		return "占位"
	case ActionSignup:
		return "注册"
	case ActionActive:
		return "激活"
	case ActionRestPassword:
		return "重置密码"
	case ActionEditPassword:
		return "修改密码"
	case ActionCreateResume:
		return "新建简历"
	case ActionEditResume:
		return "编辑简历"
	case ActionDELETEResume:
		return "删除简历"
	}
	return ""
}

func (x Action) MarshalGQL(w io.Writer) {
	w.Write(stringsi.QuoteToBytes(x.String()))
}

func (x *Action) UnmarshalGQL(v interface{}) error {
	if i, ok := v.(uint32); ok {
		*x = Action(i)
		return nil
	}
	return errors.New("枚举值需要数字类型")
}

func (x Role) String() string {
	switch x {
	case PlaceholderRole:
		return "占位"
	case RoleNormal:
		return "普通用户"
	case RoleAdmin:
		return "管理员"
	case RoleSuperAdmin:
		return "超级管理员"
	}
	return ""
}

func (x Role) MarshalGQL(w io.Writer) {
	w.Write(stringsi.QuoteToBytes(x.String()))
}

func (x *Role) UnmarshalGQL(v interface{}) error {
	if i, ok := v.(uint32); ok {
		*x = Role(i)
		return nil
	}
	return errors.New("枚举值需要数字类型")
}

func (x Gender) String() string {
	switch x {
	case GenderPlaceholder:
		return "占位"
	case GenderUnfilled:
		return "未填"
	case GenderMale:
		return "男"
	case GenderFemale:
		return "女"
	}
	return ""
}

func (x Gender) MarshalGQL(w io.Writer) {
	w.Write(stringsi.QuoteToBytes(x.String()))
}

func (x *Gender) UnmarshalGQL(v interface{}) error {
	if i, ok := v.(uint32); ok {
		*x = Gender(i)
		return nil
	}
	return errors.New("枚举值需要数字类型")
}

func (x UserStatus) String() string {
	switch x {
	case UserStatusPlaceholder:
		return "占位"
	case UserStatusInActive:
		return "未激活"
	case UserStatusActivated:
		return "已激活"
	case UserStatusFrozen:
		return "已冻结"
	case UserStatusDeleted:
		return "已注销"
	}
	return ""
}

func (x UserStatus) MarshalGQL(w io.Writer) {
	w.Write(stringsi.QuoteToBytes(x.String()))
}

func (x *UserStatus) UnmarshalGQL(v interface{}) error {
	if i, ok := v.(uint32); ok {
		*x = UserStatus(i)
		return nil
	}
	return errors.New("枚举值需要数字类型")
}

func (x BannedType) String() string {
	switch x {
	case BannedTypePlaceholder:
		return "占位"
	case BannedTypePost:
		return "禁言"
	case BannedTypeLogin:
		return "禁止登录"
	}
	return ""
}

func (x BannedType) MarshalGQL(w io.Writer) {
	w.Write(stringsi.QuoteToBytes(x.String()))
}

func (x *BannedType) UnmarshalGQL(v interface{}) error {
	if i, ok := v.(uint32); ok {
		*x = BannedType(i)
		return nil
	}
	return errors.New("枚举值需要数字类型")
}

func (x UserErr) String() string {
	switch x {
	case UserErrPlaceholder:
		return "占位"
	case UserErrLogin:
		return "用户名或密码错误"
	case UserErrNoActive:
		return "未激活账号"
	case UserErrNoAuthority:
		return "无权限"
	case UserErrLoginTimeout:
		return "登录超时"
	case UserErrInvalidToken:
		return "Token错误"
	case UserErrNoLogin:
		return "未登录"
	}
	return ""
}

func (x UserErr) Error() string {
	return x.String()
}

func (x UserErr) ErrRep() *errorcode.ErrRep {
	return &errorcode.ErrRep{Code: errorcode.ErrCode(x), Message: x.String()}
}

func (x UserErr) Message(msg string) error {
	return &errorcode.ErrRep{Code: errorcode.ErrCode(x), Message: msg}
}

func (x UserErr) ErrorLog(err error) error {
	log.Error(err)
	return &errorcode.ErrRep{Code: errorcode.ErrCode(x), Message: x.String()}
}

func (x UserErr) GRPCStatus() *status.Status {
	return status.New(codes.Code(x), x.String())
}

func (x UserErr) MarshalGQL(w io.Writer) {
	w.Write(stringsi.QuoteToBytes(x.String()))
}

func (x *UserErr) UnmarshalGQL(v interface{}) error {
	if i, ok := v.(uint32); ok {
		*x = UserErr(i)
		return nil
	}
	return errors.New("枚举值需要数字类型")
}
