// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: user/user.model.proto

package user

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 用户
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" annotation:"昵称"`
	Account  string `protobuf:"bytes,17,opt,name=account,proto3" json:"account,omitempty" gorm:"size:36;not null;unique" validate:"required,gte=6,lte=20" annotation:"账号"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"-" gorm:"size:32;not null" validate:"gte=8,lte=15" annotation:"密码"`
	Mail     string `protobuf:"bytes,6,opt,name=mail,proto3" json:"mail,omitempty" gorm:"size:16;default:''" validate:"email" annotation:"邮箱"`
	Phone    string `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty" gorm:"size:32;default:''" validate:"phone" annotation:"手机号"`
	// 性别，0未填写，1男，2女
	Gender      Gender     `protobuf:"varint,8,opt,name=gender,proto3,enum=user.Gender" json:"gender,omitempty" gorm:"type:int2;default:0"`
	Birthday    string     `protobuf:"bytes,9,opt,name=birthday,proto3" json:"birthday,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Address     string     `protobuf:"bytes,14,opt,name=address,proto3" json:"address,omitempty" gorm:"size:255;default:''"`
	Intro       string     `protobuf:"bytes,10,opt,name=intro,proto3" json:"intro,omitempty" gorm:"size:255;default:''"`
	Signature   string     `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty" gorm:"size:255;default:''"`
	AvatarUrl   string     `protobuf:"bytes,12,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty" gorm:"size:255;default:''"`
	CoverUrl    string     `protobuf:"bytes,13,opt,name=coverUrl,proto3" json:"coverUrl,omitempty" gorm:"size:255;default:''"`
	Role        Role       `protobuf:"varint,24,opt,name=role,proto3,enum=user.Role" json:"role,omitempty" gorm:"type:int2;default:0"`
	RealName    string     `protobuf:"bytes,19,opt,name=realName,proto3" json:"realName,omitempty" gorm:"size:5;default:''" annotation:"实名"`
	IdNo        string     `protobuf:"bytes,18,opt,name=IdNo,proto3" json:"IdNo,omitempty" gorm:"size:22;default:''" annotation:"身份证号"`
	Status      UserStatus `protobuf:"varint,28,opt,name=status,proto3,enum=user.UserStatus" json:"status,omitempty" gorm:"type:int2;default:0"`
	CreatedAt   string     `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	ActivatedAt string     `protobuf:"bytes,3,opt,name=activatedAt,proto3" json:"activatedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	DeletedAt   string     `protobuf:"bytes,27,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"` // uint32 isDeleted = 29 [(go.field) = {tags:'gorm:"default:0"'}];
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return GenderPlaceholder
}

func (x *User) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *User) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *User) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *User) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *User) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *User) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return PlaceholderRole
}

func (x *User) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *User) GetIdNo() string {
	if x != nil {
		return x.IdNo
	}
	return ""
}

func (x *User) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatusPlaceholder
}

func (x *User) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *User) GetActivatedAt() string {
	if x != nil {
		return x.ActivatedAt
	}
	return ""
}

func (x *User) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type UserExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	LastActivatedAt string `protobuf:"bytes,23,opt,name=lastActivatedAt,proto3" json:"lastActivatedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index" annotation:"上次操作时间"`
	Score           uint64 `protobuf:"varint,15,opt,name=score,proto3" json:"score,omitempty" gorm:"default:0" annotation:"分数"`
	FollowCount     uint64 `protobuf:"varint,2,opt,name=followCount,proto3" json:"followCount,omitempty" gorm:"default:0" annotation:"关注数"`
	FollowedCount   uint64 `protobuf:"varint,17,opt,name=followedCount,proto3" json:"followedCount,omitempty" gorm:"default:0" annotation:"被关注数"`
	ArticleCount    uint64 `protobuf:"varint,18,opt,name=articleCount,proto3" json:"articleCount,omitempty" gorm:"default:0" annotation:"文章数"`
	MomentCount     uint64 `protobuf:"varint,19,opt,name=momentCount,proto3" json:"momentCount,omitempty" gorm:"default:0" annotation:"瞬间数"`
	DiaryBookCount  uint64 `protobuf:"varint,20,opt,name=diaryBookCount,proto3" json:"diaryBookCount,omitempty" gorm:"default:0" annotation:"日记本数"`
	DiaryCount      uint64 `protobuf:"varint,21,opt,name=diaryCount,proto3" json:"diaryCount,omitempty" gorm:"default:0" annotation:"日记数"`
	FavoritesCount  uint64 `protobuf:"varint,5,opt,name=favoritesCount,proto3" json:"favoritesCount,omitempty" gorm:"default:0" annotation:"收藏夹数"`
	CollectCount    uint64 `protobuf:"varint,3,opt,name=collectCount,proto3" json:"collectCount,omitempty" gorm:"default:0" annotation:"收藏数"`
}

func (x *UserExt) Reset() {
	*x = UserExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExt) ProtoMessage() {}

func (x *UserExt) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExt.ProtoReflect.Descriptor instead.
func (*UserExt) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{1}
}

func (x *UserExt) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserExt) GetLastActivatedAt() string {
	if x != nil {
		return x.LastActivatedAt
	}
	return ""
}

func (x *UserExt) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserExt) GetFollowCount() uint64 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *UserExt) GetFollowedCount() uint64 {
	if x != nil {
		return x.FollowedCount
	}
	return 0
}

func (x *UserExt) GetArticleCount() uint64 {
	if x != nil {
		return x.ArticleCount
	}
	return 0
}

func (x *UserExt) GetMomentCount() uint64 {
	if x != nil {
		return x.MomentCount
	}
	return 0
}

func (x *UserExt) GetDiaryBookCount() uint64 {
	if x != nil {
		return x.DiaryBookCount
	}
	return 0
}

func (x *UserExt) GetDiaryCount() uint64 {
	if x != nil {
		return x.DiaryCount
	}
	return 0
}

func (x *UserExt) GetFavoritesCount() uint64 {
	if x != nil {
		return x.FavoritesCount
	}
	return 0
}

func (x *UserExt) GetCollectCount() uint64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

//关注表
type UserFollow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty" gorm:"index"`
	FollowId  uint64 `protobuf:"varint,2,opt,name=followId,proto3" json:"followId,omitempty" gorm:"default:0"`
	CreatedAt string `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt string `protobuf:"bytes,4,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status    uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;"` //状态：0无效，1有效
}

func (x *UserFollow) Reset() {
	*x = UserFollow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFollow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFollow) ProtoMessage() {}

func (x *UserFollow) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFollow.ProtoReflect.Descriptor instead.
func (*UserFollow) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{2}
}

func (x *UserFollow) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserFollow) GetFollowId() uint64 {
	if x != nil {
		return x.FollowId
	}
	return 0
}

func (x *UserFollow) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserFollow) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *UserFollow) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//用户分数变化日志
type UserScoreLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	UserId    uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty" gorm:"index"`
	Score     int64  `protobuf:"zigzag64,3,opt,name=score,proto3" json:"score" gorm:""`
	Reason    string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty" gorm:"size:255"`
	CreatedAt string `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Remark    string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty" gorm:"size:255"`
}

func (x *UserScoreLog) Reset() {
	*x = UserScoreLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreLog) ProtoMessage() {}

func (x *UserScoreLog) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreLog.ProtoReflect.Descriptor instead.
func (*UserScoreLog) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{3}
}

func (x *UserScoreLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserScoreLog) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserScoreLog) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserScoreLog) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UserScoreLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserScoreLog) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

//用户封禁日志
type UserBannedLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	UserId   uint64     `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty" gorm:"index"`
	Duration uint64     `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty" gorm:""`
	Reason   string     `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty" gorm:"size:255"`
	Type     BannedType `protobuf:"varint,5,opt,name=type,proto3,enum=user.BannedType" json:"type,omitempty"`
	BannedAt string     `protobuf:"bytes,6,opt,name=bannedAt,proto3" json:"bannedAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Remark   string     `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty" gorm:"size:255"`
}

func (x *UserBannedLog) Reset() {
	*x = UserBannedLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBannedLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBannedLog) ProtoMessage() {}

func (x *UserBannedLog) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBannedLog.ProtoReflect.Descriptor instead.
func (*UserBannedLog) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{4}
}

func (x *UserBannedLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBannedLog) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserBannedLog) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UserBannedLog) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UserBannedLog) GetType() BannedType {
	if x != nil {
		return x.Type
	}
	return BannedTypePlaceholder
}

func (x *UserBannedLog) GetBannedAt() string {
	if x != nil {
		return x.BannedAt
	}
	return ""
}

func (x *UserBannedLog) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

//用户操作日志
type UserActionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	UserId uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty" gorm:"index"`
	//类型
	Action Action `protobuf:"varint,3,opt,name=action,proto3,enum=user.Action" json:"action,omitempty"`
	//相关id
	RelatedId string `protobuf:"bytes,4,opt,name=relatedId,proto3" json:"relatedId,omitempty" gorm:"size:255"`
	LastValue []byte `protobuf:"bytes,5,opt,name=lastValue,proto3" json:"lastValue,omitempty" gorm:"size:255"`
	CreatedAt string `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Remark    string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty" gorm:"size:255"`
	//设备
	DeviceInfo *UserDeviceInfo `protobuf:"bytes,8,opt,name=deviceInfo,proto3" json:"deviceInfo,omitempty" gorm:"embedded"`
	Device     uint32          `protobuf:"varint,9,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UserActionLog) Reset() {
	*x = UserActionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionLog) ProtoMessage() {}

func (x *UserActionLog) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionLog.ProtoReflect.Descriptor instead.
func (*UserActionLog) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{5}
}

func (x *UserActionLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserActionLog) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserActionLog) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return ActionPlaceholder
}

func (x *UserActionLog) GetRelatedId() string {
	if x != nil {
		return x.RelatedId
	}
	return ""
}

func (x *UserActionLog) GetLastValue() []byte {
	if x != nil {
		return x.LastValue
	}
	return nil
}

func (x *UserActionLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserActionLog) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserActionLog) GetDeviceInfo() *UserDeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *UserActionLog) GetDevice() uint32 {
	if x != nil {
		return x.Device
	}
	return 0
}

//简历
type Resume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	UserId uint64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty" gorm:"index"`
	// 公司或组织或学校
	Company string `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty" gorm:"size:255"`
	// 职位或学历
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty" gorm:"size:255"`
	// 部门或专业
	Department string `protobuf:"bytes,5,opt,name=department,proto3" json:"department,omitempty" gorm:"size:255"`
	StartTime  string `protobuf:"bytes,6,opt,name=startTime,proto3" json:"startTime,omitempty" gorm:"type:timestamptz(6)"`
	EndTime    string `protobuf:"bytes,7,opt,name=endTime,proto3" json:"endTime,omitempty" gorm:"type:timestamptz(6)"`
	Remark     string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty" gorm:"size:255"`
	// 0-Education 教育经历,1- Work 职业生涯
	Type   uint32 `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty" gorm:"type:int2;default:0"`
	Status uint32 `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Resume) Reset() {
	*x = Resume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resume) ProtoMessage() {}

func (x *Resume) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resume.ProtoReflect.Descriptor instead.
func (*Resume) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{6}
}

func (x *Resume) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Resume) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Resume) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Resume) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Resume) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *Resume) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Resume) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Resume) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Resume) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Resume) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" annotation:"名字"`
	Score     uint64 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty" gorm:"default:0"`
	Gender    Gender `protobuf:"varint,8,opt,name=gender,proto3,enum=user.Gender" json:"gender,omitempty" gorm:"type:int2;default:0"`
	AvatarUrl string `protobuf:"bytes,12,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty" gorm:"size:255;default:''"`
}

func (x *UserBaseInfo) Reset() {
	*x = UserBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfo) ProtoMessage() {}

func (x *UserBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfo.ProtoReflect.Descriptor instead.
func (*UserBaseInfo) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{7}
}

func (x *UserBaseInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserBaseInfo) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserBaseInfo) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return GenderPlaceholder
}

func (x *UserBaseInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

// 用户授权信息
type UserAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name   string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" annotation:"名字"`
	Role   Role       `protobuf:"varint,24,opt,name=role,proto3,enum=user.Role" json:"role,omitempty" gorm:"type:int2;default:0"`
	Status UserStatus `protobuf:"varint,28,opt,name=status,proto3,enum=user.UserStatus" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *UserAuthInfo) Reset() {
	*x = UserAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthInfo) ProtoMessage() {}

func (x *UserAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthInfo.ProtoReflect.Descriptor instead.
func (*UserAuthInfo) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{8}
}

func (x *UserAuthInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAuthInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserAuthInfo) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return PlaceholderRole
}

func (x *UserAuthInfo) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatusPlaceholder
}

type UserOAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" annotation:"名字"`
	Mail         string `protobuf:"bytes,6,opt,name=mail,proto3" json:"mail,omitempty" gorm:"size:16;default:''" validate:"email" annotation:"邮箱"`
	Location     string `protobuf:"bytes,16,opt,name=location,proto3" json:"location,omitempty" gorm:"size:255;default:''"`
	Introduction string `protobuf:"bytes,10,opt,name=introduction,proto3" json:"introduction,omitempty" gorm:"size:255;default:''"`
	AvatarURL    string `protobuf:"bytes,12,opt,name=avatarURL,proto3" json:"avatarURL,omitempty" gorm:"size:255;default:''"`
}

func (x *UserOAuthInfo) Reset() {
	*x = UserOAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOAuthInfo) ProtoMessage() {}

func (x *UserOAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOAuthInfo.ProtoReflect.Descriptor instead.
func (*UserOAuthInfo) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{9}
}

func (x *UserOAuthInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserOAuthInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserOAuthInfo) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *UserOAuthInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserOAuthInfo) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *UserOAuthInfo) GetAvatarURL() string {
	if x != nil {
		return x.AvatarURL
	}
	return ""
}

type UserDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//设备
	Device     string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty" gorm:"size:255"`
	Os         string `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty" gorm:"size:255"`
	AppCode    string `protobuf:"bytes,6,opt,name=appCode,proto3" json:"appCode,omitempty" gorm:"size:255"`
	AppVersion string `protobuf:"bytes,7,opt,name=appVersion,proto3" json:"appVersion,omitempty" gorm:"size:255"`
	IP         string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty" gorm:"size:255"`
	Lng        string `protobuf:"bytes,8,opt,name=lng,proto3" json:"lng,omitempty" gorm:"type:numeric(10,6)"`
	Lat        string `protobuf:"bytes,9,opt,name=lat,proto3" json:"lat,omitempty" gorm:"type:numeric(10,6)"`
	Area       string `protobuf:"bytes,2,opt,name=area,proto3" json:"area,omitempty" gorm:"size:255"`
	UserAgent  string `protobuf:"bytes,5,opt,name=userAgent,proto3" json:"userAgent,omitempty" gorm:"size:255"`
}

func (x *UserDeviceInfo) Reset() {
	*x = UserDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceInfo) ProtoMessage() {}

func (x *UserDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceInfo.ProtoReflect.Descriptor instead.
func (*UserDeviceInfo) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{10}
}

func (x *UserDeviceInfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *UserDeviceInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *UserDeviceInfo) GetAppCode() string {
	if x != nil {
		return x.AppCode
	}
	return ""
}

func (x *UserDeviceInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *UserDeviceInfo) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *UserDeviceInfo) GetLng() string {
	if x != nil {
		return x.Lng
	}
	return ""
}

func (x *UserDeviceInfo) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *UserDeviceInfo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *UserDeviceInfo) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Res:
	//	*Response_Code
	//	*Response_Msg
	Res isResponse_Res `protobuf_oneof:"res"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{11}
}

func (m *Response) GetRes() isResponse_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (x *Response) GetCode() uint32 {
	if x, ok := x.GetRes().(*Response_Code); ok {
		return x.Code
	}
	return 0
}

func (x *Response) GetMsg() string {
	if x, ok := x.GetRes().(*Response_Msg); ok {
		return x.Msg
	}
	return ""
}

type isResponse_Res interface {
	isResponse_Res()
}

type Response_Code struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3,oneof"`
}

type Response_Msg struct {
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3,oneof"`
}

func (*Response_Code) isResponse_Res() {}

func (*Response_Msg) isResponse_Res() {}

type UserContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MomentCount  uint64 `protobuf:"varint,1,opt,name=momentCount,proto3" json:"momentCount,omitempty"`
	DiaryCount   uint64 `protobuf:"varint,2,opt,name=diaryCount,proto3" json:"diaryCount,omitempty"`
	ArticleCount uint64 `protobuf:"varint,3,opt,name=articleCount,proto3" json:"articleCount,omitempty"`
	FavCount     uint64 `protobuf:"varint,4,opt,name=favCount,proto3" json:"favCount,omitempty"`
}

func (x *UserContent) Reset() {
	*x = UserContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContent) ProtoMessage() {}

func (x *UserContent) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContent.ProtoReflect.Descriptor instead.
func (*UserContent) Descriptor() ([]byte, []int) {
	return file_user_user_model_proto_rawDescGZIP(), []int{12}
}

func (x *UserContent) GetMomentCount() uint64 {
	if x != nil {
		return x.MomentCount
	}
	return 0
}

func (x *UserContent) GetDiaryCount() uint64 {
	if x != nil {
		return x.DiaryCount
	}
	return 0
}

func (x *UserContent) GetArticleCount() uint64 {
	if x != nil {
		return x.ArticleCount
	}
	return 0
}

func (x *UserContent) GetFavCount() uint64 {
	if x != nil {
		return x.FavCount
	}
	return 0
}

var File_user_user_model_proto protoreflect.FileDescriptor

var file_user_user_model_proto_rawDesc = []byte{
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x14, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x0c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01,
	0x12, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x3b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20,
	0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe6, 0x98, 0xb5, 0xe7, 0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x74, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5a, 0xd2, 0xb5, 0x03, 0x56, 0xa2, 0x01, 0x53, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x33, 0x36, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x65, 0x3d, 0x36,
	0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x32, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xb4, 0xa6, 0xe5, 0x8f, 0xb7, 0x22, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0xd2, 0xb5, 0x03, 0x4f, 0xa2, 0x01, 0x4c,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x33, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x67, 0x74, 0x65, 0x3d, 0x38,
	0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x35, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x22, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x59, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0xd2, 0xb5, 0x03, 0x41, 0xa2, 0x01, 0x3e, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x36, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x22, 0x52, 0x04, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x5e, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x48, 0xd2, 0xb5, 0x03, 0x44, 0xa2, 0x01, 0x41, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x33, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27,
	0x27, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0x22, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x4e, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x28, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x30, 0x22, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x5f, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30,
	0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
	0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x37, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27,
	0x22, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb5, 0x03,
	0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32,
	0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb5,
	0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a,
	0x32, 0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb5,
	0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a,
	0x32, 0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x52,
	0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xae, 0x9e, 0xe5,
	0x90, 0x8d, 0x22, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x04, 0x49, 0x64, 0x4e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xd2, 0xb5, 0x03,
	0x36, 0xa2, 0x01, 0x33, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xba, 0xab, 0xe4, 0xbb, 0xbd,
	0xe8, 0xaf, 0x81, 0xe5, 0x8f, 0xb7, 0x22, 0x52, 0x04, 0x49, 0x64, 0x4e, 0x6f, 0x12, 0x50, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74,
	0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77,
	0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x65, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2,
	0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43,
	0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29,
	0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31,
	0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc1,
	0x07, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x63, 0xd2, 0xb5, 0x03, 0x5f, 0xa2, 0x01, 0x5c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36,
	0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30,
	0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe4, 0xb8, 0x8a, 0xe6, 0xac, 0xa1, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x22, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0xd2, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0,
	0x22, 0x92, 0x41, 0x0c, 0x2a, 0x06, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0x9a, 0x02, 0x01, 0x03,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0xd2, 0xb5,
	0x03, 0x2a, 0xa2, 0x01, 0x27, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0x85, 0xb3, 0xe6, 0xb3, 0xa8, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0b, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x31, 0xd2, 0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xa2, 0xab, 0xe5, 0x85, 0xb3, 0xe6, 0xb3, 0xa8, 0xe6,
	0x95, 0xb0, 0x22, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0xd2, 0xb5, 0x03, 0x2a, 0xa2, 0x01,
	0x27, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x96,
	0x87, 0xe7, 0xab, 0xa0, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0xd2, 0xb5, 0x03,
	0x2a, 0xa2, 0x01, 0x27, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe7, 0x9e, 0xac, 0xe9, 0x97, 0xb4, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0b, 0x6d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x72,
	0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x31, 0xd2, 0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97, 0xa5, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0xe6,
	0x95, 0xb0, 0x22, 0x52, 0x0e, 0x64, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0xd2, 0xb5, 0x03, 0x2a, 0xa2, 0x01, 0x27,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97, 0xa5,
	0xe8, 0xae, 0xb0, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0a, 0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x31, 0xd2, 0xb5, 0x03,
	0x2d, 0xa2, 0x01, 0x2a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe5, 0xa4, 0xb9, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0xd2, 0xb5, 0x03, 0x2a, 0xa2, 0x01, 0x27, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f,
	0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x12, 0x2b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x13, 0xd2, 0xb5, 0x03, 0x0f, 0xa2, 0x01, 0x0c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x17, 0xd2, 0xb5, 0x03, 0x13, 0xa2, 0x01, 0x10, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03,
	0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31,
	0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0xd2, 0xb5, 0x03,
	0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69,
	0x6e, 0x74, 0x32, 0x3b, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xd2,
	0xb5, 0x03, 0x0f, 0xa2, 0x01, 0x0c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x42, 0x1b, 0xd2, 0xb5, 0x03, 0x17, 0xa2,
	0x01, 0x14, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x22, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2,
	0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x32, 0x35, 0x35, 0x22, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28,
	0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29,
	0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0xeb, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13,
	0xd2, 0xb5, 0x03, 0x0f, 0xa2, 0x01, 0x0c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xd2,
	0xb5, 0x03, 0x0a, 0xa2, 0x01, 0x07, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x22, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a,
	0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36,
	0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xe3, 0x03, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18,
	0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xd2, 0xb5,
	0x03, 0x0f, 0xa2, 0x01, 0x0c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01,
	0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22,
	0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29,
	0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12,
	0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x22, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xaa, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xd2,
	0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x0f, 0xa2, 0x01, 0x0c, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12,
	0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35,
	0x35, 0x22, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a,
	0x28, 0x36, 0x29, 0x22, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28,
	0x36, 0x29, 0x22, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5,
	0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a,
	0x32, 0x35, 0x35, 0x22, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d,
	0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2,
	0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x13, 0xa2, 0x01, 0x10, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92,
	0x41, 0x0c, 0x2a, 0x06, 0xe5, 0x88, 0x86, 0xe6, 0x95, 0xb0, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x28, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01,
	0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x96, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d,
	0xe5, 0xad, 0x97, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x50, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xa4, 0x03, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x19, 0xd2,
	0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2, 0xb5, 0x03, 0x2e,
	0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30,
	0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x22, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x45, 0xd2, 0xb5, 0x03, 0x41, 0xa2, 0x01, 0x3e, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x36, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x27, 0x27, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0x22, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x3d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x27, 0x27, 0x22, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x52, 0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01,
	0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x52, 0x4c, 0x22, 0xc4, 0x03, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2,
	0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35,
	0x22, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52, 0x07, 0x61, 0x70, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x02, 0x49,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2, 0x01, 0x0f,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22, 0x52,
	0x02, 0x49, 0x50, 0x12, 0x32, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c, 0xa2, 0x01, 0x19, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x28, 0x31, 0x30, 0x2c, 0x36,
	0x29, 0x22, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c, 0xa2, 0x01, 0x19, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x28,
	0x31, 0x30, 0x2c, 0x36, 0x29, 0x22, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12, 0xa2,
	0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35,
	0x22, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2, 0xb5, 0x03, 0x12,
	0xa2, 0x01, 0x0f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35,
	0x35, 0x22, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x42, 0x05, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x66, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x41, 0x0a, 0x17,
	0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6f, 0x76, 0x2f, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_user_model_proto_rawDescOnce sync.Once
	file_user_user_model_proto_rawDescData = file_user_user_model_proto_rawDesc
)

func file_user_user_model_proto_rawDescGZIP() []byte {
	file_user_user_model_proto_rawDescOnce.Do(func() {
		file_user_user_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_user_model_proto_rawDescData)
	})
	return file_user_user_model_proto_rawDescData
}

var file_user_user_model_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_user_user_model_proto_goTypes = []interface{}{
	(*User)(nil),           // 0: user.User
	(*UserExt)(nil),        // 1: user.UserExt
	(*UserFollow)(nil),     // 2: user.UserFollow
	(*UserScoreLog)(nil),   // 3: user.UserScoreLog
	(*UserBannedLog)(nil),  // 4: user.UserBannedLog
	(*UserActionLog)(nil),  // 5: user.UserActionLog
	(*Resume)(nil),         // 6: user.Resume
	(*UserBaseInfo)(nil),   // 7: user.UserBaseInfo
	(*UserAuthInfo)(nil),   // 8: user.UserAuthInfo
	(*UserOAuthInfo)(nil),  // 9: user.UserOAuthInfo
	(*UserDeviceInfo)(nil), // 10: user.UserDeviceInfo
	(*Response)(nil),       // 11: user.Response
	(*UserContent)(nil),    // 12: user.UserContent
	(Gender)(0),            // 13: user.Gender
	(Role)(0),              // 14: user.Role
	(UserStatus)(0),        // 15: user.UserStatus
	(BannedType)(0),        // 16: user.BannedType
	(Action)(0),            // 17: user.Action
}
var file_user_user_model_proto_depIdxs = []int32{
	13, // 0: user.User.gender:type_name -> user.Gender
	14, // 1: user.User.role:type_name -> user.Role
	15, // 2: user.User.status:type_name -> user.UserStatus
	16, // 3: user.UserBannedLog.type:type_name -> user.BannedType
	17, // 4: user.UserActionLog.action:type_name -> user.Action
	10, // 5: user.UserActionLog.deviceInfo:type_name -> user.UserDeviceInfo
	13, // 6: user.UserBaseInfo.gender:type_name -> user.Gender
	14, // 7: user.UserAuthInfo.role:type_name -> user.Role
	15, // 8: user.UserAuthInfo.status:type_name -> user.UserStatus
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_user_user_model_proto_init() }
func file_user_user_model_proto_init() {
	if File_user_user_model_proto != nil {
		return
	}
	file_user_user_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_user_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFollow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBannedLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_user_model_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Response_Code)(nil),
		(*Response_Msg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_user_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_user_model_proto_goTypes,
		DependencyIndexes: file_user_user_model_proto_depIdxs,
		MessageInfos:      file_user_user_model_proto_msgTypes,
	}.Build()
	File_user_user_model_proto = out.File
	file_user_user_model_proto_rawDesc = nil
	file_user_user_model_proto_goTypes = nil
	file_user_user_model_proto_depIdxs = nil
}
