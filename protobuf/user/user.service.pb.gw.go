// Code generated by protoc-gen-grpc-gin. DO NOT EDIT.
// source: user/user.service.proto

/*
Package user is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package user

import (
	"context"
	"io"

	"github.com/gin-gonic/gin"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"github.com/liov/tiga/protobuf/utils/empty"
	"github.com/liov/tiga/protobuf/utils/oauth"
	request_0 "github.com/liov/tiga/protobuf/utils/request"
	gin_0 "github.com/liov/tiga/utils/net/http/gin"
	"github.com/liov/tiga/utils/net/http/grpc/gateway"
	"github.com/liov/tiga/utils/net/http/request"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join
var _ = request.Error

func request_UserService_VerifyCode_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq empty.Empty
	var metadata runtime.ServerMetadata

	msg, err := client.VerifyCode(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_VerifyCode_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq empty.Empty

	return server.VerifyCode(ctx.Request.Context(), &protoReq)

}

func request_UserService_SendVerifyCode_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SendVerifyCodeReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.SendVerifyCode(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_SendVerifyCode_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq SendVerifyCodeReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.SendVerifyCode(ctx.Request.Context(), &protoReq)

}

func request_UserService_SignupVerify_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SingUpVerifyReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.SignupVerify(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_SignupVerify_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq SingUpVerifyReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.SignupVerify(ctx.Request.Context(), &protoReq)

}

func request_UserService_Signup_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SignupReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.Signup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_Signup_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq SignupReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.Signup(ctx.Request.Context(), &protoReq)

}

func request_UserService_EasySignup_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SignupReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.EasySignup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_EasySignup_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq SignupReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.EasySignup(ctx.Request.Context(), &protoReq)

}

func request_UserService_Active_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ActiveReq
	var metadata runtime.ServerMetadata

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	protoReq.Secret, err = runtime.String(ctx.Param("secret"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "secret", request.Error(err))
	}

	msg, err := client.Active(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_Active_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq ActiveReq

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	protoReq.Secret, err = runtime.String(ctx.Param("secret"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "secret", request.Error(err))
	}

	return server.Active(ctx.Request.Context(), &protoReq)

}

func request_UserService_Edit_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq EditReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	msg, err := client.Edit(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_Edit_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq EditReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	return server.Edit(ctx.Request.Context(), &protoReq)

}

func request_UserService_Login_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq LoginReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.Login(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_Login_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq LoginReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.Login(ctx.Request.Context(), &protoReq)

}

func request_UserService_Logout_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq empty.Empty
	var metadata runtime.ServerMetadata

	msg, err := client.Logout(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_Logout_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq empty.Empty

	return server.Logout(ctx.Request.Context(), &protoReq)

}

func request_UserService_AuthInfo_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq empty.Empty
	var metadata runtime.ServerMetadata

	msg, err := client.AuthInfo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_AuthInfo_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq empty.Empty

	return server.AuthInfo(ctx.Request.Context(), &protoReq)

}

func request_UserService_ForgetPassword_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq LoginReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.ForgetPassword(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_ForgetPassword_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq LoginReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.ForgetPassword(ctx.Request.Context(), &protoReq)

}

func request_UserService_ResetPassword_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ResetPasswordReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	protoReq.Secret, err = runtime.String(ctx.Param("secret"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "secret", request.Error(err))
	}

	msg, err := client.ResetPassword(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_ResetPassword_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq ResetPasswordReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	protoReq.Secret, err = runtime.String(ctx.Param("secret"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "secret", request.Error(err))
	}

	return server.ResetPassword(ctx.Request.Context(), &protoReq)

}

func request_UserService_Info_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq request_0.Object
	var metadata runtime.ServerMetadata

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	msg, err := client.Info(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_Info_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq request_0.Object

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	return server.Info(ctx.Request.Context(), &protoReq)

}

func request_UserService_ActionLogList_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ActionLogListReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.ActionLogList(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_ActionLogList_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq ActionLogListReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.ActionLogList(ctx.Request.Context(), &protoReq)

}

func request_UserService_BaseList_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BaseListReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.BaseList(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_BaseList_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq BaseListReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.BaseList(ctx.Request.Context(), &protoReq)

}

func request_UserService_Follow_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq FollowReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.Follow(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_Follow_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq FollowReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.Follow(ctx.Request.Context(), &protoReq)

}

func request_UserService_DelFollow_0(ctx *gin.Context, client UserServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq FollowReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.DelFollow(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_UserService_DelFollow_0(server UserServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq FollowReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.DelFollow(ctx.Request.Context(), &protoReq)

}

func request_OauthService_OauthAuthorize_0(ctx *gin.Context, client OauthServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq oauth.OauthReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.OauthAuthorize(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OauthService_OauthAuthorize_0(server OauthServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq oauth.OauthReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.OauthAuthorize(ctx.Request.Context(), &protoReq)

}

func request_OauthService_OauthToken_0(ctx *gin.Context, client OauthServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq oauth.OauthReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.OauthToken(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OauthService_OauthToken_0(server OauthServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq oauth.OauthReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.OauthToken(ctx.Request.Context(), &protoReq)

}

// RegisterUserServiceHandlerServer registers the http handlers for service UserService to "mux".
// UnaryRPC     :call UserServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterUserServiceHandlerFromEndpoint instead.
func RegisterUserServiceHandlerServer(mux *gin.Engine, server UserServiceServer) error {

	mux.Handle("GET", "/api/v1/verifyCode", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_VerifyCode_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/SendVerifyCode", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_SendVerifyCode_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/user/signupVerify", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_SignupVerify_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/user", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_Signup_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v2/user", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_EasySignup_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/active/:id/:secret", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_Active_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("PUT", "/api/v1/user/:id", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_Edit_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/user/login", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_Login_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/logout", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_Logout_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/auth", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_AuthInfo_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/forgetPassword", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_ForgetPassword_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("PATCH", "/api/v1/user/resetPassword/:id/:secret", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_ResetPassword_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/:id", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_Info_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/actionLog", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_ActionLogList_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/baseUserList", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_BaseList_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/follow", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_Follow_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("DELETE", "/api/v1/user/follow", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_UserService_DelFollow_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	return nil
}

// RegisterOauthServiceHandlerServer registers the http handlers for service OauthService to "mux".
// UnaryRPC     :call OauthServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOauthServiceHandlerFromEndpoint instead.
func RegisterOauthServiceHandlerServer(mux *gin.Engine, server OauthServiceServer) error {

	mux.Handle("GET", "/oauth/authorize", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_OauthService_OauthAuthorize_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/oauth/access_token", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_OauthService_OauthToken_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	return nil
}

// RegisterUserServiceHandlerFromEndpoint is same as RegisterUserServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterUserServiceHandlerFromEndpoint(ctx context.Context, mux *gin.Engine, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterUserServiceHandler(ctx, mux, conn)
}

// RegisterUserServiceHandler registers the http handlers for service UserService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterUserServiceHandler(ctx context.Context, mux *gin.Engine, conn *grpc.ClientConn) error {
	return RegisterUserServiceHandlerClient(ctx, mux, NewUserServiceClient(conn))
}

// RegisterUserServiceHandlerClient registers the http handlers for service UserService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "UserServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "UserServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "UserServiceClient" to call the correct interceptors.
func RegisterUserServiceHandlerClient(ctx context.Context, mux *gin.Engine, client UserServiceClient) error {

	mux.Handle("GET", "/api/v1/verifyCode", func(ctx *gin.Context) {
		resp, md, err := request_UserService_VerifyCode_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/SendVerifyCode", func(ctx *gin.Context) {
		resp, md, err := request_UserService_SendVerifyCode_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/user/signupVerify", func(ctx *gin.Context) {
		resp, md, err := request_UserService_SignupVerify_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/user", func(ctx *gin.Context) {
		resp, md, err := request_UserService_Signup_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v2/user", func(ctx *gin.Context) {
		resp, md, err := request_UserService_EasySignup_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/active/:id/:secret", func(ctx *gin.Context) {
		resp, md, err := request_UserService_Active_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("PUT", "/api/v1/user/:id", func(ctx *gin.Context) {
		resp, md, err := request_UserService_Edit_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/user/login", func(ctx *gin.Context) {
		resp, md, err := request_UserService_Login_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/logout", func(ctx *gin.Context) {
		resp, md, err := request_UserService_Logout_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/auth", func(ctx *gin.Context) {
		resp, md, err := request_UserService_AuthInfo_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/forgetPassword", func(ctx *gin.Context) {
		resp, md, err := request_UserService_ForgetPassword_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("PATCH", "/api/v1/user/resetPassword/:id/:secret", func(ctx *gin.Context) {
		resp, md, err := request_UserService_ResetPassword_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/:id", func(ctx *gin.Context) {
		resp, md, err := request_UserService_Info_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/actionLog", func(ctx *gin.Context) {
		resp, md, err := request_UserService_ActionLogList_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/baseUserList", func(ctx *gin.Context) {
		resp, md, err := request_UserService_BaseList_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/user/follow", func(ctx *gin.Context) {
		resp, md, err := request_UserService_Follow_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("DELETE", "/api/v1/user/follow", func(ctx *gin.Context) {
		resp, md, err := request_UserService_DelFollow_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	return nil
}

// RegisterOauthServiceHandlerFromEndpoint is same as RegisterOauthServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOauthServiceHandlerFromEndpoint(ctx context.Context, mux *gin.Engine, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOauthServiceHandler(ctx, mux, conn)
}

// RegisterOauthServiceHandler registers the http handlers for service OauthService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOauthServiceHandler(ctx context.Context, mux *gin.Engine, conn *grpc.ClientConn) error {
	return RegisterOauthServiceHandlerClient(ctx, mux, NewOauthServiceClient(conn))
}

// RegisterOauthServiceHandlerClient registers the http handlers for service OauthService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OauthServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OauthServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OauthServiceClient" to call the correct interceptors.
func RegisterOauthServiceHandlerClient(ctx context.Context, mux *gin.Engine, client OauthServiceClient) error {

	mux.Handle("GET", "/oauth/authorize", func(ctx *gin.Context) {
		resp, md, err := request_OauthService_OauthAuthorize_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/oauth/access_token", func(ctx *gin.Context) {
		resp, md, err := request_OauthService_OauthToken_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	return nil
}
