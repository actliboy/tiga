// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: content/content.enum.proto

package content

import (
	_ "github.com/liov/tiga/protobuf/utils/proto/gogo"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentType int32

const (
	ContentPlaceholder ContentType = 0
	ContentMoment      ContentType = 1
	ContentNote        ContentType = 2
	ContentDairy       ContentType = 3
	ContentDairyBook   ContentType = 4
	ContentFavorites   ContentType = 5
	ContentCollection  ContentType = 6
	ContentComment     ContentType = 7
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "ContentPlaceholder",
		1: "ContentMoment",
		2: "ContentNote",
		3: "ContentDairy",
		4: "ContentDairyBook",
		5: "ContentFavorites",
		6: "ContentCollection",
		7: "ContentComment",
	}
	ContentType_value = map[string]int32{
		"ContentPlaceholder": 0,
		"ContentMoment":      1,
		"ContentNote":        2,
		"ContentDairy":       3,
		"ContentDairyBook":   4,
		"ContentFavorites":   5,
		"ContentCollection":  6,
		"ContentComment":     7,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) OrigString() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_content_content_enum_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_content_content_enum_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_content_content_enum_proto_rawDescGZIP(), []int{0}
}

type AttrType int32

const (
	AttrPlaceholder AttrType = 0
	AttrImage       AttrType = 1
	AttrVideo       AttrType = 2
	AttrAudio       AttrType = 3
	AttrCover       AttrType = 4
	AttrCategory    AttrType = 5
	AttrTitle       AttrType = 6
	AttrAbstract    AttrType = 7
	AttrIntro       AttrType = 8
	AttrContentType AttrType = 9
	AttrModifyTimes AttrType = 10
)

// Enum value maps for AttrType.
var (
	AttrType_name = map[int32]string{
		0:  "AttrPlaceholder",
		1:  "AttrImage",
		2:  "AttrVideo",
		3:  "AttrAudio",
		4:  "AttrCover",
		5:  "AttrCategory",
		6:  "AttrTitle",
		7:  "AttrAbstract",
		8:  "AttrIntro",
		9:  "AttrContentType",
		10: "AttrModifyTimes",
	}
	AttrType_value = map[string]int32{
		"AttrPlaceholder": 0,
		"AttrImage":       1,
		"AttrVideo":       2,
		"AttrAudio":       3,
		"AttrCover":       4,
		"AttrCategory":    5,
		"AttrTitle":       6,
		"AttrAbstract":    7,
		"AttrIntro":       8,
		"AttrContentType": 9,
		"AttrModifyTimes": 10,
	}
)

func (x AttrType) Enum() *AttrType {
	p := new(AttrType)
	*p = x
	return p
}

func (x AttrType) OrigString() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_content_content_enum_proto_enumTypes[1].Descriptor()
}

func (AttrType) Type() protoreflect.EnumType {
	return &file_content_content_enum_proto_enumTypes[1]
}

func (x AttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttrType.Descriptor instead.
func (AttrType) EnumDescriptor() ([]byte, []int) {
	return file_content_content_enum_proto_rawDescGZIP(), []int{1}
}

type TagType int32

const (
	TagPlaceholder TagType = 0
	TagContent     TagType = 1
	TagMood        TagType = 2
	TagWeather     TagType = 3
	TagLocation    TagType = 4
	TagCategory    TagType = 5
	TagNotice      TagType = 6
)

// Enum value maps for TagType.
var (
	TagType_name = map[int32]string{
		0: "TagPlaceholder",
		1: "TagContent",
		2: "TagMood",
		3: "TagWeather",
		4: "TagLocation",
		5: "TagCategory",
		6: "TagNotice",
	}
	TagType_value = map[string]int32{
		"TagPlaceholder": 0,
		"TagContent":     1,
		"TagMood":        2,
		"TagWeather":     3,
		"TagLocation":    4,
		"TagCategory":    5,
		"TagNotice":      6,
	}
)

func (x TagType) Enum() *TagType {
	p := new(TagType)
	*p = x
	return p
}

func (x TagType) OrigString() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagType) Descriptor() protoreflect.EnumDescriptor {
	return file_content_content_enum_proto_enumTypes[2].Descriptor()
}

func (TagType) Type() protoreflect.EnumType {
	return &file_content_content_enum_proto_enumTypes[2]
}

func (x TagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagType.Descriptor instead.
func (TagType) EnumDescriptor() ([]byte, []int) {
	return file_content_content_enum_proto_rawDescGZIP(), []int{2}
}

// 可见范围
type ViewPermission int32

const (
	ViewPermissionPlaceholder ViewPermission = 0
	ViewPermissionAll         ViewPermission = 1
	ViewPermissionSelf        ViewPermission = 2
	ViewPermissionHomePage    ViewPermission = 3
	ViewPermissionStranger    ViewPermission = 4
	ViewPermissionShield      ViewPermission = 5
	ViewPermissionOpen        ViewPermission = 6
)

// Enum value maps for ViewPermission.
var (
	ViewPermission_name = map[int32]string{
		0: "ViewPermissionPlaceholder",
		1: "ViewPermissionAll",
		2: "ViewPermissionSelf",
		3: "ViewPermissionHomePage",
		4: "ViewPermissionStranger",
		5: "ViewPermissionShield",
		6: "ViewPermissionOpen",
	}
	ViewPermission_value = map[string]int32{
		"ViewPermissionPlaceholder": 0,
		"ViewPermissionAll":         1,
		"ViewPermissionSelf":        2,
		"ViewPermissionHomePage":    3,
		"ViewPermissionStranger":    4,
		"ViewPermissionShield":      5,
		"ViewPermissionOpen":        6,
	}
)

func (x ViewPermission) Enum() *ViewPermission {
	p := new(ViewPermission)
	*p = x
	return p
}

func (x ViewPermission) OrigString() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_content_content_enum_proto_enumTypes[3].Descriptor()
}

func (ViewPermission) Type() protoreflect.EnumType {
	return &file_content_content_enum_proto_enumTypes[3]
}

func (x ViewPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewPermission.Descriptor instead.
func (ViewPermission) EnumDescriptor() ([]byte, []int) {
	return file_content_content_enum_proto_rawDescGZIP(), []int{3}
}

// 可见范围
type MomentType int32

const (
	MomentTypePlaceholder MomentType = 0
	MomentTypeImage       MomentType = 1
	MomentTypeVideo       MomentType = 2
	MomentTypeAudio       MomentType = 4
)

// Enum value maps for MomentType.
var (
	MomentType_name = map[int32]string{
		0: "MomentTypePlaceholder",
		1: "MomentTypeImage",
		2: "MomentTypeVideo",
		4: "MomentTypeAudio",
	}
	MomentType_value = map[string]int32{
		"MomentTypePlaceholder": 0,
		"MomentTypeImage":       1,
		"MomentTypeVideo":       2,
		"MomentTypeAudio":       4,
	}
)

func (x MomentType) Enum() *MomentType {
	p := new(MomentType)
	*p = x
	return p
}

func (x MomentType) OrigString() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MomentType) Descriptor() protoreflect.EnumDescriptor {
	return file_content_content_enum_proto_enumTypes[4].Descriptor()
}

func (MomentType) Type() protoreflect.EnumType {
	return &file_content_content_enum_proto_enumTypes[4]
}

func (x MomentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MomentType.Descriptor instead.
func (MomentType) EnumDescriptor() ([]byte, []int) {
	return file_content_content_enum_proto_rawDescGZIP(), []int{4}
}

type ContainerType int32

const (
	ContainerTypePlaceholder ContainerType = 0
	ContainerTypeFavorites   ContainerType = 1
	ContainerTypeDiaryBook   ContainerType = 2
	ContainerTypeAlbum       ContainerType = 3
	ContainerTypeCollection  ContainerType = 4
)

// Enum value maps for ContainerType.
var (
	ContainerType_name = map[int32]string{
		0: "ContainerTypePlaceholder",
		1: "ContainerTypeFavorites",
		2: "ContainerTypeDiaryBook",
		3: "ContainerTypeAlbum",
		4: "ContainerTypeCollection",
	}
	ContainerType_value = map[string]int32{
		"ContainerTypePlaceholder": 0,
		"ContainerTypeFavorites":   1,
		"ContainerTypeDiaryBook":   2,
		"ContainerTypeAlbum":       3,
		"ContainerTypeCollection":  4,
	}
)

func (x ContainerType) Enum() *ContainerType {
	p := new(ContainerType)
	*p = x
	return p
}

func (x ContainerType) OrigString() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerType) Descriptor() protoreflect.EnumDescriptor {
	return file_content_content_enum_proto_enumTypes[5].Descriptor()
}

func (ContainerType) Type() protoreflect.EnumType {
	return &file_content_content_enum_proto_enumTypes[5]
}

func (x ContainerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerType.Descriptor instead.
func (ContainerType) EnumDescriptor() ([]byte, []int) {
	return file_content_content_enum_proto_rawDescGZIP(), []int{5}
}

var File_content_content_enum_proto protoreflect.FileDescriptor

var file_content_content_enum_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2a, 0xab, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x00, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06,
	0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x12, 0x1d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe7,
	0x9e, 0xac, 0xe9, 0x97, 0xb4, 0x12, 0x1b, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x10, 0x02, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe7, 0xac, 0x94, 0xe8,
	0xae, 0xb0, 0x12, 0x1c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x69,
	0x72, 0x79, 0x10, 0x03, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe6, 0x97, 0xa5, 0xe8, 0xae, 0xb0,
	0x12, 0x23, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x69, 0x72, 0x79,
	0x42, 0x6f, 0x6f, 0x6b, 0x10, 0x04, 0x1a, 0x0d, 0x92, 0x9d, 0x20, 0x09, 0xe6, 0x97, 0xa5, 0xe8,
	0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x12, 0x23, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x10, 0x05, 0x1a, 0x0d, 0x92, 0x9d, 0x20,
	0x09, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe5, 0xa4, 0xb9, 0x12, 0x21, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x06, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0x12, 0x1e, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x07, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0x1a, 0x11, 0xd2,
	0xb5, 0x03, 0x0d, 0xf2, 0x01, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x2a, 0xea, 0x02, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x10, 0x00, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x12, 0x19,
	0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x1a, 0x0a, 0x92,
	0x9d, 0x20, 0x06, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x12, 0x19, 0x0a, 0x09, 0x41, 0x74, 0x74,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x02, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe8, 0xa7,
	0x86, 0xe9, 0xa2, 0x91, 0x12, 0x19, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x10, 0x03, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe9, 0x9f, 0xb3, 0xe9, 0xa2, 0x91, 0x12,
	0x19, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x04, 0x1a, 0x0a,
	0x92, 0x9d, 0x20, 0x06, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x12, 0x1c, 0x0a, 0x0c, 0x41, 0x74,
	0x74, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x05, 0x1a, 0x0a, 0x92, 0x9d,
	0x20, 0x06, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0x12, 0x19, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x10, 0x06, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe6, 0xa0, 0x87,
	0xe9, 0xa2, 0x98, 0x12, 0x1c, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x72, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x10, 0x07, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe6, 0x91, 0x98, 0xe8, 0xa6,
	0x81, 0x12, 0x19, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x10, 0x08,
	0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0x12, 0x25, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x09, 0x1a, 0x10, 0x92, 0x9d, 0x20, 0x0c, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x12, 0x25, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x0a, 0x1a, 0x10, 0x92, 0x9d, 0x20, 0x0c, 0xe4, 0xbf,
	0xae, 0xe6, 0x94, 0xb9, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x1a, 0x11, 0xd2, 0xb5, 0x03, 0x0d,
	0xf2, 0x01, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0xe2, 0x01,
	0x0a, 0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0e, 0x54, 0x61, 0x67,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x00, 0x1a, 0x0a, 0x92,
	0x9d, 0x20, 0x06, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x12, 0x1a, 0x0a, 0x0a, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0x12, 0x17, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4d, 0x6f, 0x6f, 0x64,
	0x10, 0x02, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0x12, 0x1a,
	0x0a, 0x0a, 0x54, 0x61, 0x67, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x10, 0x03, 0x1a, 0x0a,
	0x92, 0x9d, 0x20, 0x06, 0xe5, 0xa4, 0xa9, 0xe6, 0xb0, 0x94, 0x12, 0x1b, 0x0a, 0x0b, 0x54, 0x61,
	0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x1a, 0x0a, 0x92, 0x9d, 0x20,
	0x06, 0xe5, 0x9c, 0xb0, 0xe7, 0x82, 0xb9, 0x12, 0x1b, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x05, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe5, 0x88,
	0x86, 0xe7, 0xb1, 0xbb, 0x12, 0x19, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x10, 0x06, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba, 0x1a,
	0x11, 0xd2, 0xb5, 0x03, 0x0d, 0xf2, 0x01, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x2a, 0xca, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x19, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x00, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d,
	0x12, 0x24, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x10, 0x01, 0x1a, 0x0d, 0x92, 0x9d, 0x20, 0x09, 0xe6, 0x97, 0xa0,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0x12, 0x25, 0x0a, 0x12, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x02, 0x1a, 0x0d,
	0x92, 0x9d, 0x20, 0x09, 0xe4, 0xbb, 0x85, 0xe8, 0x87, 0xaa, 0xe5, 0xb7, 0xb1, 0x12, 0x26, 0x0a,
	0x16, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x10, 0x03, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe4,
	0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0x12, 0x29, 0x0a, 0x16, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x10,
	0x04, 0x1a, 0x0d, 0x92, 0x9d, 0x20, 0x09, 0xe9, 0x99, 0x8c, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xba,
	0x12, 0x2d, 0x0a, 0x14, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x05, 0x1a, 0x13, 0x92, 0x9d, 0x20, 0x0f,
	0xe5, 0xb1, 0x8f, 0xe8, 0x94, 0xbd, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xba, 0x12,
	0x2b, 0x0a, 0x12, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x06, 0x1a, 0x13, 0x92, 0x9d, 0x20, 0x0f, 0xe5, 0xbc, 0x80,
	0xe6, 0x94, 0xbe, 0xe9, 0x83, 0xa8, 0xe5, 0x88, 0x86, 0xe4, 0xba, 0xba, 0x1a, 0x11, 0xd2, 0xb5,
	0x03, 0x0d, 0xf2, 0x01, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a,
	0xa9, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x15, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x00, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe5,
	0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x12, 0x1f, 0x0a, 0x0f, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06,
	0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x12, 0x1f, 0x0a, 0x0f, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x02, 0x1a, 0x0a, 0x92, 0x9d, 0x20,
	0x06, 0xe8, 0xa7, 0x86, 0xe9, 0xa2, 0x91, 0x12, 0x1f, 0x0a, 0x0f, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x04, 0x1a, 0x0a, 0x92, 0x9d,
	0x20, 0x06, 0xe9, 0x9f, 0xb3, 0xe9, 0xa2, 0x91, 0x1a, 0x11, 0xd2, 0xb5, 0x03, 0x0d, 0xf2, 0x01,
	0x0a, 0x4f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0xef, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x00, 0x1a, 0x0a, 0x92, 0x9d, 0x20,
	0x06, 0xe5, 0x8d, 0xa0, 0xe4, 0xbd, 0x8d, 0x12, 0x29, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x10, 0x01, 0x1a, 0x0d, 0x92, 0x9d, 0x20, 0x09, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe5,
	0xa4, 0xb9, 0x12, 0x29, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x10, 0x02, 0x1a, 0x0d,
	0x92, 0x9d, 0x20, 0x09, 0xe6, 0x97, 0xa5, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x12, 0x22, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x10, 0x03, 0x1a, 0x0a, 0x92, 0x9d, 0x20, 0x06, 0xe4, 0xb8, 0x93, 0xe8, 0xbe,
	0x91, 0x12, 0x27, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x1a, 0x0a,
	0x92, 0x9d, 0x20, 0x06, 0xe5, 0x90, 0x88, 0xe9, 0x9b, 0x86, 0x1a, 0x11, 0xd2, 0xb5, 0x03, 0x0d,
	0xf2, 0x01, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x53, 0x0a,
	0x1a, 0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6f, 0x76, 0x2f, 0x68, 0x6f, 0x70,
	0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0xd2, 0xb5, 0x03, 0x02, 0x50, 0x01, 0xc8, 0x3e, 0x01, 0xd0,
	0x3e, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_content_enum_proto_rawDescOnce sync.Once
	file_content_content_enum_proto_rawDescData = file_content_content_enum_proto_rawDesc
)

func file_content_content_enum_proto_rawDescGZIP() []byte {
	file_content_content_enum_proto_rawDescOnce.Do(func() {
		file_content_content_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_content_enum_proto_rawDescData)
	})
	return file_content_content_enum_proto_rawDescData
}

var file_content_content_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_content_content_enum_proto_goTypes = []interface{}{
	(ContentType)(0),    // 0: content.ContentType
	(AttrType)(0),       // 1: content.AttrType
	(TagType)(0),        // 2: content.TagType
	(ViewPermission)(0), // 3: content.ViewPermission
	(MomentType)(0),     // 4: content.MomentType
	(ContainerType)(0),  // 5: content.ContainerType
}
var file_content_content_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_content_content_enum_proto_init() }
func file_content_content_enum_proto_init() {
	if File_content_content_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_content_enum_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_content_content_enum_proto_goTypes,
		DependencyIndexes: file_content_content_enum_proto_depIdxs,
		EnumInfos:         file_content_content_enum_proto_enumTypes,
	}.Build()
	File_content_content_enum_proto = out.File
	file_content_content_enum_proto_rawDesc = nil
	file_content_content_enum_proto_goTypes = nil
	file_content_content_enum_proto_depIdxs = nil
}
