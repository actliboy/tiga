// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: content/content.model.proto

package content

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	user "github.com/liov/tiga/protobuf/user"
	area "github.com/liov/tiga/protobuf/utils/area"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name          string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null;uniqueIndex" validate:"required,gte=2,lte=10" annotation:"名称"`
	Type          TagType `protobuf:"varint,5,opt,name=type,proto3,enum=content.TagType" json:"type,omitempty" gorm:"size:10;not null" validate:"required" annotation:"类型"`
	Description   string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" gorm:"size:100" annotation:"描述"`
	ExpressionURL string  `protobuf:"bytes,17,opt,name=expressionURL,proto3" json:"expressionURL,omitempty" gorm:"size:255" annotation:"表情url"`
	UserId        uint64  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20" annotation:"用户id"`
	CreatedAt     string  `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt     string  `protobuf:"bytes,28,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status        uint32  `protobuf:"varint,29,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{0}
}

func (x *Tag) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetType() TagType {
	if x != nil {
		return x.Type
	}
	return TagPlaceholder
}

func (x *Tag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tag) GetExpressionURL() string {
	if x != nil {
		return x.ExpressionURL
	}
	return ""
}

func (x *Tag) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Tag) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Tag) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Tag) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TagGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" validate:"required,gte=2,lte=10" annotation:"名称"`
	ParentId  uint64 `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty" gorm:"default:0;index" annotation:"直接父分类的ID"`
	CreatedAt string `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt string `protobuf:"bytes,26,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status    uint32 `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *TagGroup) Reset() {
	*x = TagGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagGroup) ProtoMessage() {}

func (x *TagGroup) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagGroup.ProtoReflect.Descriptor instead.
func (*TagGroup) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{1}
}

func (x *TagGroup) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TagGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagGroup) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *TagGroup) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TagGroup) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *TagGroup) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TagGroupRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId     uint64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId,omitempty" gorm:"index:idx_rel"`
	GroupId   uint64 `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty" gorm:"index:idx_rel"`
	CreatedAt string `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Status    uint32 `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *TagGroupRel) Reset() {
	*x = TagGroupRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagGroupRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagGroupRel) ProtoMessage() {}

func (x *TagGroupRel) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagGroupRel.ProtoReflect.Descriptor instead.
func (*TagGroupRel) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{2}
}

func (x *TagGroupRel) GetTagId() uint64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *TagGroupRel) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *TagGroupRel) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TagGroupRel) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ContentTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       ContentType `protobuf:"varint,2,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" gorm:"type:int2;not null;index:idx_content" validate:"required" annotation:"相关类型"`
	RefId      uint64      `protobuf:"varint,6,opt,name=refId,proto3" json:"refId,omitempty" gorm:"size:20;not null;index:idx_content" validate:"required" annotation:"相关id"`
	TagId      uint64      `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId,omitempty" gorm:"size:20;not null;index:idx_tag" validate:"required" annotation:"相关id"`
	Relativity uint32      `protobuf:"varint,4,opt,name=relativity,proto3" json:"relativity,omitempty" gorm:"type:int2;not null;default:0" annotation:"相关度"`
}

func (x *ContentTag) Reset() {
	*x = ContentTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTag) ProtoMessage() {}

func (x *ContentTag) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTag.ProtoReflect.Descriptor instead.
func (*ContentTag) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{3}
}

func (x *ContentTag) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *ContentTag) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *ContentTag) GetTagId() uint64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ContentTag) GetRelativity() uint32 {
	if x != nil {
		return x.Relativity
	}
	return 0
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" validate:"required,gte=2,lte=10" annotation:"名称"`
	ParentId  uint64 `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty" gorm:"default:0;index" annotation:"直接父分类的ID"`
	Sequence  uint32 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	UserId    uint64 `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20" annotation:"用户id"`
	CreatedAt string `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Status    uint32 `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{4}
}

func (x *Category) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Category) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Category) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Category) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Category) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" validate:"required,gte=2,lte=10" annotation:"名称"`
	Describe  string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty" gorm:"size:255;default:''" annotation:"描述"`
	Range     uint32 `protobuf:"varint,4,opt,name=range,proto3" json:"range,omitempty" gorm:"type:int2" annotation:"属性使用范围"`
	Style     uint32 `protobuf:"varint,5,opt,name=style,proto3" json:"style,omitempty" gorm:"type:int2" annotation:"属性的值输入风格"`
	CreatedAt string `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Status    uint32 `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Attributes) Reset() {
	*x = Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attributes) ProtoMessage() {}

func (x *Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attributes.ProtoReflect.Descriptor instead.
func (*Attributes) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{5}
}

func (x *Attributes) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attributes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attributes) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Attributes) GetRange() uint32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *Attributes) GetStyle() uint32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *Attributes) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Attributes) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type AttrGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null" validate:"required,gte=2,lte=10" annotation:"名称"`
	ParentId  uint64 `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty" gorm:"default:0;index" annotation:"直接父分类的ID"`
	CreatedAt string `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Status    uint32 `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *AttrGroup) Reset() {
	*x = AttrGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrGroup) ProtoMessage() {}

func (x *AttrGroup) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrGroup.ProtoReflect.Descriptor instead.
func (*AttrGroup) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{6}
}

func (x *AttrGroup) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttrGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttrGroup) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *AttrGroup) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *AttrGroup) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 这种方式占空间，每条都要额外记录type，不如拆表moment_tag,moment_area
type ContentAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentType ContentType `protobuf:"varint,7,opt,name=contentType,proto3,enum=content.ContentType" json:"contentType,omitempty" gorm:"type:int2;not null;index:idx_content" validate:"required" annotation:"相关类型"`
	ContentId   uint64      `protobuf:"varint,6,opt,name=contentId,proto3" json:"contentId,omitempty" gorm:"size:20;not null;index:idx_content" validate:"required" annotation:"相关id"`
	Type        AttrType    `protobuf:"varint,5,opt,name=type,proto3,enum=content.AttrType" json:"type,omitempty" gorm:"type:int2;not null;index:idx_attr" validate:"required" annotation:"类型"`
	RefId       uint64      `protobuf:"varint,3,opt,name=refId,proto3" json:"refId,omitempty" gorm:"size:20;not null;index:idx_attr" validate:"required" annotation:"相关id"`
	AttrValue   string      `protobuf:"bytes,4,opt,name=attrValue,proto3" json:"attrValue,omitempty" gorm:"type:text" validate:"required" annotation:"属性值"`
	UserId      uint64      `protobuf:"varint,9,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20" annotation:"用户id"`
	Sequence    uint32      `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Visibility  uint32      `protobuf:"varint,2,opt,name=visibility,proto3" json:"visibility,omitempty" gorm:"type:int2;default:0" annotation:"可见性，1-可见"`
	Relativity  uint32      `protobuf:"varint,8,opt,name=relativity,proto3" json:"relativity,omitempty" gorm:"type:int2;not null;default:0" annotation:"相关度"`
	Status      uint32      `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *ContentAttr) Reset() {
	*x = ContentAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentAttr) ProtoMessage() {}

func (x *ContentAttr) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentAttr.ProtoReflect.Descriptor instead.
func (*ContentAttr) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{7}
}

func (x *ContentAttr) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentPlaceholder
}

func (x *ContentAttr) GetContentId() uint64 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *ContentAttr) GetType() AttrType {
	if x != nil {
		return x.Type
	}
	return AttrPlaceholder
}

func (x *ContentAttr) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *ContentAttr) GetAttrValue() string {
	if x != nil {
		return x.AttrValue
	}
	return ""
}

func (x *ContentAttr) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ContentAttr) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ContentAttr) GetVisibility() uint32 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

func (x *ContentAttr) GetRelativity() uint32 {
	if x != nil {
		return x.Relativity
	}
	return 0
}

func (x *ContentAttr) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Title        string               `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty" gorm:"size:50;not null" annotation:"标题"`
	Intro        string               `protobuf:"bytes,25,opt,name=intro,proto3" json:"intro,omitempty" gorm:"size:100;not null" annotation:"介绍"`
	Abstract     string               `protobuf:"bytes,26,opt,name=abstract,proto3" json:"abstract,omitempty" gorm:"size:100;not null" annotation:"摘要"`
	Type         ContentType          `protobuf:"varint,23,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" gorm:"type:int2;default:0" annotation:"类型"`
	Content      string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" gorm:"text;not null" annotation:"内容"`
	Mood         *Tag                 `protobuf:"bytes,4,opt,name=mood,proto3" json:"mood,omitempty" annotation:"心情"`
	Weather      *Tag                 `protobuf:"bytes,21,opt,name=weather,proto3" json:"weather,omitempty" annotation:"天气"`
	Area         *area.Area           `protobuf:"bytes,19,opt,name=area,proto3" json:"area,omitempty" annotation:"地区"`
	AreaId       uint64               `protobuf:"varint,20,opt,name=areaId,proto3" json:"areaId,omitempty" gorm:"size:10;not null" annotation:"地区"`
	Location     string               `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty" gorm:"size:20;not null" annotation:"位置"`
	Tags         []*Tag               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" gorm:"many2many:moment_tag;foreignkey:Id;association_foreignkey:Name" annotation:"标签"`
	User         *user.UserBaseInfo   `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	UserId       uint64               `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" annotation:"用户id"`
	ApproveUsers []*user.UserBaseInfo `protobuf:"bytes,9,rep,name=approveUsers,proto3" json:"approveUsers,omitempty" gorm:"many2many:moment_approve_user" annotation:"点赞用户"`
	CollectUsers []*user.UserBaseInfo `protobuf:"bytes,10,rep,name=collectUsers,proto3" json:"collectUsers,omitempty" gorm:"many2many:moment_collect" annotation:"收藏用户"`
	LikeUsers    []*user.UserBaseInfo `protobuf:"bytes,11,rep,name=likeUsers,proto3" json:"likeUsers,omitempty" gorm:"many2many:moment_like" annotation:"喜欢用户"`
	Comments     []*Comment           `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments,omitempty" gorm:"-" annotation:"评论"`
	Sequence     uint32               `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous    uint32               `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	Permission   ViewPermission       `protobuf:"varint,13,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" gorm:"type:int2;default:0" annotation:"查看权限"`
	CreatedAt    string               `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	Status       uint32               `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{8}
}

func (x *Content) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Content) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Content) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *Content) GetAbstract() string {
	if x != nil {
		return x.Abstract
	}
	return ""
}

func (x *Content) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *Content) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Content) GetMood() *Tag {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *Content) GetWeather() *Tag {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *Content) GetArea() *area.Area {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *Content) GetAreaId() uint64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *Content) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Content) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Content) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Content) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Content) GetApproveUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.ApproveUsers
	}
	return nil
}

func (x *Content) GetCollectUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.CollectUsers
	}
	return nil
}

func (x *Content) GetLikeUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

func (x *Content) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Content) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Content) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *Content) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

func (x *Content) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Content) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{9}
}

func (x *Media) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 瞬间
type Moment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" gorm:"type:text;not null" annotation:"内容"`
	Images  string `protobuf:"bytes,32,opt,name=images,proto3" json:"images,omitempty" gorm:"type:text;default:''" annotation:"图片"`
	// 还是决定瞬间和日记形态合为一种
	BookId uint64     `protobuf:"varint,4,opt,name=bookId,proto3" json:"bookId,omitempty" gorm:"size:20;default:0" annotation:"日记本Id"`
	Book   *DiaryBook `protobuf:"bytes,26,opt,name=book,proto3" json:"book,omitempty" gorm:"-" annotation:"日记本"`
	// 单个视频或音频或多个图片
	Type           MomentType           `protobuf:"varint,3,opt,name=type,proto3,enum=content.MomentType" json:"type,omitempty" gorm:"type:int2;default:0" annotation:"瞬间类型"`
	Mood           *TinyTag             `protobuf:"bytes,5,opt,name=mood,proto3" json:"mood,omitempty" gorm:"-" annotation:"心情"`
	Weather        *TinyTag             `protobuf:"bytes,7,opt,name=weather,proto3" json:"weather,omitempty" gorm:"-" annotation:"天气"`
	Area           *area.Area           `protobuf:"bytes,9,opt,name=area,proto3" json:"area,omitempty" gorm:"-" annotation:"地区"`
	AreaId         uint64               `protobuf:"varint,10,opt,name=areaId,proto3" json:"areaId,omitempty" gorm:"size:10;default:0" annotation:"地区"`
	AreaVisibility uint32               `protobuf:"varint,11,opt,name=areaVisibility,proto3" json:"areaVisibility,omitempty" gorm:"type:int2;default:2" annotation:"地区可见性，1-可见"`
	Location       string               `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty" gorm:"size:20;default:''" annotation:"位置"`
	Tags           []*TinyTag           `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" gorm:"-" annotation:"标签"`
	User           *user.UserBaseInfo   `protobuf:"bytes,14,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	UserId         uint64               `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" annotation:"用户id"`
	ApproveUsers   []uint64             `protobuf:"varint,15,rep,packed,name=approveUsers,proto3" json:"approveUsers,omitempty" gorm:"-" annotation:"点赞用户"`
	CollectUsers   []uint64             `protobuf:"varint,16,rep,packed,name=collectUsers,proto3" json:"collectUsers,omitempty" gorm:"-" annotation:"收藏用户"`
	LikeUsers      []uint64             `protobuf:"varint,25,rep,packed,name=likeUsers,proto3" json:"likeUsers,omitempty" gorm:"-" annotation:"喜欢用户"`
	Comments       []*Comment           `protobuf:"bytes,18,rep,name=comments,proto3" json:"comments,omitempty" gorm:"-" annotation:"评论"`
	Users          []*user.UserBaseInfo `protobuf:"bytes,31,rep,name=users,proto3" json:"users,omitempty" gorm:"-" annotation:"评论"`
	Ext            *ContentExt          `protobuf:"bytes,30,opt,name=ext,proto3" json:"ext,omitempty" gorm:"-" annotation:"统计数据"`
	LikeId         uint64               `protobuf:"varint,27,opt,name=likeId,proto3" json:"likeId,omitempty" gorm:"-" annotation:"喜欢id,为0代表用户没有点喜欢"`
	UnlikeId       uint64               `protobuf:"varint,29,opt,name=unlikeId,proto3" json:"unlikeId,omitempty" gorm:"-" annotation:"不喜欢id,为0代表用户没有点喜欢"`
	Collects       []uint64             `protobuf:"varint,28,rep,packed,name=collects,proto3" json:"collects,omitempty" gorm:"-" annotation:"是否收藏"`
	Sequence       uint32               `protobuf:"varint,19,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous      uint32               `protobuf:"varint,20,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	Permission     ViewPermission       `protobuf:"varint,21,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" gorm:"type:int2;default:0" annotation:"查看权限"`
	CreatedAt      string               `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt      string               `protobuf:"bytes,23,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status         uint32               `protobuf:"varint,24,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Moment) Reset() {
	*x = Moment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Moment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Moment) ProtoMessage() {}

func (x *Moment) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Moment.ProtoReflect.Descriptor instead.
func (*Moment) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{10}
}

func (x *Moment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Moment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Moment) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Moment) GetBookId() uint64 {
	if x != nil {
		return x.BookId
	}
	return 0
}

func (x *Moment) GetBook() *DiaryBook {
	if x != nil {
		return x.Book
	}
	return nil
}

func (x *Moment) GetType() MomentType {
	if x != nil {
		return x.Type
	}
	return MomentTypePlaceholder
}

func (x *Moment) GetMood() *TinyTag {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *Moment) GetWeather() *TinyTag {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *Moment) GetArea() *area.Area {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *Moment) GetAreaId() uint64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *Moment) GetAreaVisibility() uint32 {
	if x != nil {
		return x.AreaVisibility
	}
	return 0
}

func (x *Moment) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Moment) GetTags() []*TinyTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Moment) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Moment) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Moment) GetApproveUsers() []uint64 {
	if x != nil {
		return x.ApproveUsers
	}
	return nil
}

func (x *Moment) GetCollectUsers() []uint64 {
	if x != nil {
		return x.CollectUsers
	}
	return nil
}

func (x *Moment) GetLikeUsers() []uint64 {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

func (x *Moment) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Moment) GetUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Moment) GetExt() *ContentExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Moment) GetLikeId() uint64 {
	if x != nil {
		return x.LikeId
	}
	return 0
}

func (x *Moment) GetUnlikeId() uint64 {
	if x != nil {
		return x.UnlikeId
	}
	return 0
}

func (x *Moment) GetCollects() []uint64 {
	if x != nil {
		return x.Collects
	}
	return nil
}

func (x *Moment) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Moment) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *Moment) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

func (x *Moment) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Moment) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Moment) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TinyTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;"`
	Name string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"size:10;not null;uniqueIndex" validate:"required,gte=2,lte=10" annotation:"名称"`
	Type TagType `protobuf:"varint,5,opt,name=type,proto3,enum=content.TagType" json:"type,omitempty" gorm:"size:10;not null" validate:"required" annotation:"类型"`
}

func (x *TinyTag) Reset() {
	*x = TinyTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TinyTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TinyTag) ProtoMessage() {}

func (x *TinyTag) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TinyTag.ProtoReflect.Descriptor instead.
func (*TinyTag) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{11}
}

func (x *TinyTag) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TinyTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TinyTag) GetType() TagType {
	if x != nil {
		return x.Type
	}
	return TagPlaceholder
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Title        string               `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty" gorm:"size:50;default:''" annotation:"标题"`
	Intro        string               `protobuf:"bytes,25,opt,name=intro,proto3" json:"intro,omitempty" gorm:"size:100;default:''" annotation:"介绍"`
	Abstract     string               `protobuf:"bytes,26,opt,name=abstract,proto3" json:"abstract,omitempty" gorm:"size:100;default:''" annotation:"摘要"`
	Content      string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" gorm:"text;not null" annotation:"内容"`
	ContentType  uint32               `protobuf:"varint,27,opt,name=contentType,proto3" json:"contentType,omitempty" gorm:"type:int2;default:0" annotation:"文本类型"`
	Mood         *TinyTag             `protobuf:"bytes,4,opt,name=mood,proto3" json:"mood,omitempty" gorm:"-" annotation:"心情"`
	Weather      *TinyTag             `protobuf:"bytes,21,opt,name=weather,proto3" json:"weather,omitempty" gorm:"-" annotation:"天气"`
	Area         *area.Area           `protobuf:"bytes,19,opt,name=area,proto3" json:"area,omitempty" gorm:"-" annotation:"地区"`
	AreaId       uint64               `protobuf:"varint,20,opt,name=areaId,proto3" json:"areaId,omitempty" gorm:"size:10;default:0" annotation:"地区"`
	Location     string               `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty" gorm:"size:20;default:''" annotation:"位置"`
	Tags         []*Tag               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" gorm:"-" annotation:"标签"`
	User         *user.UserBaseInfo   `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	UserId       uint64               `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;default:0;index" annotation:"用户id"`
	ApproveUsers []*user.UserBaseInfo `protobuf:"bytes,9,rep,name=approveUsers,proto3" json:"approveUsers,omitempty" gorm:"-" annotation:"点赞用户"`
	CollectUsers []*user.UserBaseInfo `protobuf:"bytes,10,rep,name=collectUsers,proto3" json:"collectUsers,omitempty" gorm:"-" annotation:"收藏用户"`
	LikeUsers    []*user.UserBaseInfo `protobuf:"bytes,11,rep,name=likeUsers,proto3" json:"likeUsers,omitempty" gorm:"-" annotation:"喜欢用户"`
	Comments     []*Comment           `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments,omitempty" gorm:"-" annotation:"评论"`
	Sequence     uint32               `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous    uint32               `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	Permission   ViewPermission       `protobuf:"varint,13,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" gorm:"type:int2;default:0" annotation:"查看权限"`
	CreatedAt    string               `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt    string               `protobuf:"bytes,28,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status       uint32               `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{12}
}

func (x *Article) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *Article) GetAbstract() string {
	if x != nil {
		return x.Abstract
	}
	return ""
}

func (x *Article) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Article) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *Article) GetMood() *TinyTag {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *Article) GetWeather() *TinyTag {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *Article) GetArea() *area.Area {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *Article) GetAreaId() uint64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *Article) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Article) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Article) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Article) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Article) GetApproveUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.ApproveUsers
	}
	return nil
}

func (x *Article) GetCollectUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.CollectUsers
	}
	return nil
}

func (x *Article) GetLikeUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

func (x *Article) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Article) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Article) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *Article) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

func (x *Article) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Article) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Article) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 连载
type Serial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Serial) Reset() {
	*x = Serial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Serial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Serial) ProtoMessage() {}

func (x *Serial) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Serial.ProtoReflect.Descriptor instead.
func (*Serial) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{13}
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" gorm:"primaryKey;"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title" gorm:"type:varchar(10)" validate:"gte=3,lte=10" comment:"标题"`
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content" gorm:"type:text"`
	CreatedAt string `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt string `protobuf:"bytes,28,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status    uint32 `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{14}
}

func (x *Note) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Note) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Note) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Note) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Note) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Note) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type DiaryBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Title       string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" gorm:"size:50;not null" annotation:"标题"`
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" gorm:"type:text;not null" annotation:"描述"`
	Cover       string         `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty" gorm:"size:255;not null" annotation:"封面"`
	Sequence    uint32         `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous   uint32         `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	Permission  ViewPermission `protobuf:"varint,13,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" gorm:"type:int2;default:0" annotation:"查看权限"`
	UserId      uint64         `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" annotation:"用户id"`
	CreatedAt   string         `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt   string         `protobuf:"bytes,28,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status      uint32         `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *DiaryBook) Reset() {
	*x = DiaryBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiaryBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiaryBook) ProtoMessage() {}

func (x *DiaryBook) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiaryBook.ProtoReflect.Descriptor instead.
func (*DiaryBook) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{15}
}

func (x *DiaryBook) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DiaryBook) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DiaryBook) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiaryBook) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *DiaryBook) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *DiaryBook) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *DiaryBook) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

func (x *DiaryBook) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DiaryBook) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DiaryBook) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *DiaryBook) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Type        ContainerType  `protobuf:"varint,5,opt,name=type,proto3,enum=content.ContainerType" json:"type,omitempty" gorm:"type:int2;not null" annotation:"类型"`
	Title       string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" gorm:"size:50;not null" annotation:"标题"`
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" gorm:"type:text;not null" annotation:"描述"`
	Cover       string         `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty" gorm:"size:255;not null" annotation:"封面"`
	Sequence    uint32         `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous   uint32         `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	Permission  ViewPermission `protobuf:"varint,13,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" gorm:"type:int2;default:0" annotation:"查看权限"`
	UserId      uint64         `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" annotation:"用户id"`
	CreatedAt   string         `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt   string         `protobuf:"bytes,28,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status      uint32         `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{16}
}

func (x *Container) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Container) GetType() ContainerType {
	if x != nil {
		return x.Type
	}
	return ContainerTypePlaceholder
}

func (x *Container) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Container) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Container) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Container) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Container) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *Container) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

func (x *Container) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Container) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Container) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Container) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Diary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Content        string               `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" gorm:"type:text;not null" annotation:"内容"`
	BookId         uint64               `protobuf:"varint,4,opt,name=bookId,proto3" json:"bookId,omitempty" gorm:"size:20;default:0" annotation:"日记本Id"`
	Book           *DiaryBook           `protobuf:"bytes,26,opt,name=book,proto3" json:"book,omitempty" gorm:"-" annotation:"日记本"`
	Mood           *TinyTag             `protobuf:"bytes,5,opt,name=mood,proto3" json:"mood,omitempty" gorm:"-" annotation:"心情"`
	Weather        *TinyTag             `protobuf:"bytes,7,opt,name=weather,proto3" json:"weather,omitempty" gorm:"-" annotation:"天气"`
	Area           *area.Area           `protobuf:"bytes,9,opt,name=area,proto3" json:"area,omitempty" gorm:"-" annotation:"地区"`
	AreaId         uint64               `protobuf:"varint,10,opt,name=areaId,proto3" json:"areaId,omitempty" gorm:"size:10;default:0" annotation:"地区"`
	AreaVisibility uint32               `protobuf:"varint,11,opt,name=areaVisibility,proto3" json:"areaVisibility,omitempty" gorm:"type:int2;default:2" annotation:"地区可见性，1-可见"`
	Location       string               `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty" gorm:"size:20;default:''" annotation:"位置"`
	Tags           []*TinyTag           `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" gorm:"-" annotation:"标签"`
	User           *user.UserBaseInfo   `protobuf:"bytes,14,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	UserId         uint64               `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" annotation:"用户id"`
	ApproveUsers   []*user.UserBaseInfo `protobuf:"bytes,15,rep,name=approveUsers,proto3" json:"approveUsers,omitempty" gorm:"-" annotation:"点赞用户"`
	CollectUsers   []*user.UserBaseInfo `protobuf:"bytes,16,rep,name=collectUsers,proto3" json:"collectUsers,omitempty" gorm:"-" annotation:"收藏用户"`
	LikeUsers      []*user.UserBaseInfo `protobuf:"bytes,25,rep,name=likeUsers,proto3" json:"likeUsers,omitempty" gorm:"-" annotation:"喜欢用户"`
	Comments       []*Comment           `protobuf:"bytes,18,rep,name=comments,proto3" json:"comments,omitempty" gorm:"-" annotation:"评论"`
	Sequence       uint32               `protobuf:"varint,19,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous      uint32               `protobuf:"varint,20,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	Permission     ViewPermission       `protobuf:"varint,21,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" gorm:"type:int2;default:0" annotation:"查看权限"`
	CreatedAt      string               `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt      string               `protobuf:"bytes,23,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status         uint32               `protobuf:"varint,24,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Diary) Reset() {
	*x = Diary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diary) ProtoMessage() {}

func (x *Diary) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diary.ProtoReflect.Descriptor instead.
func (*Diary) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{17}
}

func (x *Diary) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Diary) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Diary) GetBookId() uint64 {
	if x != nil {
		return x.BookId
	}
	return 0
}

func (x *Diary) GetBook() *DiaryBook {
	if x != nil {
		return x.Book
	}
	return nil
}

func (x *Diary) GetMood() *TinyTag {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *Diary) GetWeather() *TinyTag {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *Diary) GetArea() *area.Area {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *Diary) GetAreaId() uint64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *Diary) GetAreaVisibility() uint32 {
	if x != nil {
		return x.AreaVisibility
	}
	return 0
}

func (x *Diary) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Diary) GetTags() []*TinyTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Diary) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Diary) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Diary) GetApproveUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.ApproveUsers
	}
	return nil
}

func (x *Diary) GetCollectUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.CollectUsers
	}
	return nil
}

func (x *Diary) GetLikeUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

func (x *Diary) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Diary) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Diary) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *Diary) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

func (x *Diary) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Diary) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Diary) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Favorites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	User        *user.UserBaseInfo   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	UserId      uint64               `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"用户id"`
	Title       string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" gorm:"size:10;not null" annotation:"标题"`
	Description string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" gorm:"type:text;not null" annotation:"描述"`
	Cover       string               `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty" gorm:"size:255;not null" annotation:"封面"`
	Sequence    uint32               `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous   uint32               `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	FollowUsers []*user.UserBaseInfo `protobuf:"bytes,7,rep,name=followUsers,proto3" json:"followUsers,omitempty" gorm:"-" annotation:"关注人"`
	Collections []*Collection        `protobuf:"bytes,6,rep,name=collections,proto3" json:"collections,omitempty" gorm:"-" annotation:"收藏"`
	CreatedAt   string               `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt   string               `protobuf:"bytes,26,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
}

func (x *Favorites) Reset() {
	*x = Favorites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Favorites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Favorites) ProtoMessage() {}

func (x *Favorites) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Favorites.ProtoReflect.Descriptor instead.
func (*Favorites) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{18}
}

func (x *Favorites) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Favorites) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Favorites) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Favorites) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Favorites) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Favorites) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Favorites) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Favorites) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *Favorites) GetFollowUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.FollowUsers
	}
	return nil
}

func (x *Favorites) GetCollections() []*Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *Favorites) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Favorites) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type FavFollow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavId     uint64 `protobuf:"varint,1,opt,name=favId,proto3" json:"favId,omitempty" gorm:"not null;index:idx_fav_user"`
	UserId    uint64 `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index:idx_fav_user" annotation:"用户id"`
	CreatedAt string `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt string `protobuf:"bytes,26,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
}

func (x *FavFollow) Reset() {
	*x = FavFollow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavFollow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavFollow) ProtoMessage() {}

func (x *FavFollow) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavFollow.ProtoReflect.Descriptor instead.
func (*FavFollow) Descriptor() ([]byte, []int) {
	return file_content_content_model_proto_rawDescGZIP(), []int{19}
}

func (x *FavFollow) GetFavId() uint64 {
	if x != nil {
		return x.FavId
	}
	return 0
}

func (x *FavFollow) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FavFollow) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FavFollow) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

var File_content_content_model_proto protoreflect.FileDescriptor

var file_content_content_model_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2f, 0x61, 0x72, 0x65, 0x61, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x05, 0x0a,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x73, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0xd2,
	0xb5, 0x03, 0x5b, 0xa2, 0x01, 0x58, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x65,
	0x3d, 0x32, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x22, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e,
	0x75, 0x6c, 0x6c, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xd2, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x30, 0x22, 0x20,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f,
	0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xd2, 0xb5, 0x03, 0x2a, 0xa2, 0x01,
	0x27, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x22,
	0x20, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xa1,
	0xa8, 0xe6, 0x83, 0x85, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x43, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2b, 0xd2, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36,
	0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a,
	0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x03, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x19, 0xd2,
	0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0xd2, 0xb5, 0x03, 0x4f,
	0xa2, 0x01, 0x4c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30,
	0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74,
	0x65, 0x3d, 0x32, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3f, 0xd2, 0xb5, 0x03, 0x3b, 0xa2, 0x01, 0x38,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe7, 0x88, 0xb6, 0xe5, 0x88, 0x86, 0xe7,
	0xb1, 0xbb, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f,
	0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20,
	0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d,
	0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02,
	0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x54,
	0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1b, 0xd2, 0xb5, 0x03, 0x17, 0xa2,
	0x01, 0x14, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64,
	0x78, 0x5f, 0x72, 0x65, 0x6c, 0x22, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1b,
	0xd2, 0xb5, 0x03, 0x17, 0xa2, 0x01, 0x14, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x65, 0x6c, 0x22, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2,
	0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x03, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x60, 0xd2,
	0xb5, 0x03, 0x5c, 0xa2, 0x01, 0x59, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x5a, 0xd2, 0xb5, 0x03, 0x56, 0xa2, 0x01, 0x53, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e,
	0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22,
	0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x56, 0xd2, 0xb5, 0x03, 0x52, 0xa2, 0x01, 0x4f, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74,
	0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f,
	0x74, 0x61, 0x67, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x41, 0xd2, 0xb5, 0x03, 0x3d, 0xa2,
	0x01, 0x3a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe5, 0xba, 0xa6, 0x22, 0x52, 0x0a, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xde, 0x04, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53,
	0xd2, 0xb5, 0x03, 0x4f, 0xa2, 0x01, 0x4c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x2c, 0x67, 0x74, 0x65, 0x3d, 0x32, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x30, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3f, 0xd2, 0xb5, 0x03,
	0x3b, 0xa2, 0x01, 0x38, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe7, 0x88, 0xb6,
	0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x22, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2,
	0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5,
	0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5,
	0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd,
	0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x2b, 0xd2, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69,
	0x7a, 0x65, 0x3a, 0x32, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2,
	0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x04, 0x0a, 0x0a, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x53, 0xd2, 0xb5, 0x03, 0x4f, 0xa2, 0x01, 0x4c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x65, 0x3d, 0x32, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31,
	0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0xd2, 0xb5, 0x03, 0x32, 0xa2, 0x01, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27,
	0x22, 0x20, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6,
	0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x4d, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x37, 0xd2, 0xb5, 0x03, 0x33, 0xa2, 0x01, 0x30, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x22, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x53, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3d,
	0xd2, 0xb5, 0x03, 0x39, 0xa2, 0x01, 0x36, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc,
	0xe8, 0xbe, 0x93, 0xe5, 0x85, 0xa5, 0xe9, 0xa3, 0x8e, 0xe6, 0xa0, 0xbc, 0x22, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2,
	0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x41, 0x74,
	0x74, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x53, 0xd2, 0xb5, 0x03, 0x4f, 0xa2, 0x01, 0x4c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x65, 0x3d, 0x32, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3f, 0xd2,
	0xb5, 0x03, 0x3b, 0xa2, 0x01, 0x38, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe7,
	0x88, 0xb6, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe7, 0x9a, 0x84, 0x49, 0x44, 0x22, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03,
	0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2,
	0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22,
	0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc9, 0x08,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x98, 0x01,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x60, 0xd2, 0xb5, 0x03, 0x5c, 0xa2,
	0x01, 0x59, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x3a, 0x69, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b,
	0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x5a, 0xd2, 0xb5, 0x03,
	0x56, 0xa2, 0x01, 0x53, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32,
	0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x3a, 0x69, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b,
	0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x7e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x57, 0xd2, 0xb5, 0x03, 0x53, 0xa2, 0x01, 0x50, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20,
	0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6d, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x57, 0xd2, 0xb5, 0x03, 0x53, 0xa2, 0x01, 0x50, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x60, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xd2, 0xb5, 0x03, 0x3e, 0xa2, 0x01, 0x3b, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb1,
	0x9e, 0xe6, 0x80, 0xa7, 0xe5, 0x80, 0xbc, 0x22, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x2b, 0xd2, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03,
	0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69,
	0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba,
	0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a,
	0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c,
	0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x63, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0xe6, 0x80, 0xa7, 0xef, 0xbc,
	0x8c, 0x31, 0x2d, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0x22, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x41, 0xd2, 0xb5, 0x03, 0x3d,
	0xa2, 0x01, 0x3a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe5, 0xba, 0xa6, 0x22, 0x52, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2,
	0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfc, 0x0f, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x48, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32,
	0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x35, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2,
	0x98, 0x22, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01,
	0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x30, 0x3b,
	0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0x22, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x12, 0x4f, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x30, 0x3b, 0x6e, 0x6f,
	0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x91, 0x98, 0xe8, 0xa6, 0x81, 0x22, 0x52, 0x08, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2,
	0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xd2, 0xb5, 0x03, 0x2b, 0xa2, 0x01, 0x28,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e,
	0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x1a, 0xd2,
	0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0x22, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x1a,
	0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe5, 0xa4, 0xa9, 0xe6, 0xb0, 0x94, 0x22, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x1a, 0xd2,
	0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x22, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12,
	0x4a, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x32, 0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69,
	0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5,
	0x8c, 0xba, 0x22, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2,
	0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae,
	0x22, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x60, 0xd2, 0xb5, 0x03, 0x5c, 0xa2, 0x01,
	0x59, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d, 0x61, 0x6e, 0x79,
	0x3a, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x3b, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x6b, 0x65, 0x79, 0x3a, 0x49, 0x64, 0x3b, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x6b, 0x65, 0x79,
	0x3a, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x4b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0xd2,
	0xb5, 0x03, 0x36, 0xa2, 0x01, 0x33, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x7d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x45, 0xd2, 0xb5, 0x03,
	0x41, 0xa2, 0x01, 0x3e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d,
	0x61, 0x6e, 0x79, 0x3a, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x9e, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x22, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x78, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x40, 0xd2, 0xb5, 0x03, 0x3c,
	0xa2, 0x01, 0x39, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d, 0x61,
	0x6e, 0x79, 0x3a, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6,
	0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x3d, 0xd2, 0xb5, 0x03, 0x39, 0xa2, 0x01, 0x36, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x6d, 0x61, 0x6e, 0x79, 0x32, 0x6d, 0x61, 0x6e, 0x79, 0x3a, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22,
	0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xaf, 0x84,
	0xe8, 0xae, 0xba, 0x22, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86,
	0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92,
	0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42,
	0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90,
	0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x74, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37,
	0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01,
	0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32,
	0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2,
	0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfd, 0x13, 0x0a, 0x06,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75,
	0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x4e, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xd2, 0xb5, 0x03, 0x32, 0xa2, 0x01, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x22, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x50, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x38, 0xd2, 0xb5, 0x03, 0x34, 0xa2, 0x01, 0x31, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97,
	0xa5, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x49, 0x64, 0x22, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79,
	0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x22, 0xa2, 0x01, 0x1f, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe6, 0x97, 0xa5, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x22, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6b, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9e, 0xac, 0xe9, 0x97, 0xb4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01,
	0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0x22, 0x52, 0x04, 0x6d,
	0x6f, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xa4, 0xa9, 0xe6, 0xb0, 0x94, 0x22, 0x52, 0x07, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x23,
	0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5,
	0x8c, 0xba, 0x22, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x4b, 0x0a, 0x06, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2,
	0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x22, 0x52, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49,
	0xd2, 0xb5, 0x03, 0x45, 0xa2, 0x01, 0x42, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x32,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c,
	0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c,
	0x31, 0x2d, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0x22, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03,
	0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32,
	0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae,
	0x22, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42, 0x23, 0xd2, 0xb5, 0x03,
	0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x22,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01,
	0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x3a, 0xd2, 0xb5, 0x03, 0x36, 0xa2, 0x01, 0x33, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75,
	0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x04, 0x42, 0x29, 0xd2,
	0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x82, 0xb9, 0xe8, 0xb5,
	0x9e, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x04, 0x42, 0x29, 0xd2, 0xb5,
	0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x04, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01,
	0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x22, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x51,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0x22, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0x22, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x50, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x74, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x22, 0x52, 0x03, 0x65,
	0x78, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x45, 0xd2, 0xb5, 0x03, 0x41, 0xa2, 0x01, 0x3e, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x69, 0x64, 0x2c, 0xe4, 0xb8, 0xba, 0x30, 0xe4, 0xbb, 0xa3,
	0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7,
	0x82, 0xb9, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x22, 0x52, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49,
	0x64, 0x12, 0x64, 0x0a, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x48, 0xd2, 0xb5, 0x03, 0x44, 0xa2, 0x01, 0x41, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe4, 0xb8, 0x8d, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x69, 0x64, 0x2c, 0xe4, 0xb8, 0xba,
	0x30, 0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0xb2, 0xa1,
	0xe6, 0x9c, 0x89, 0xe7, 0x82, 0xb9, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x22, 0x52, 0x08, 0x75,
	0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x04, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2,
	0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0x94, 0xb6,
	0xe8, 0x97, 0x8f, 0x22, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86,
	0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92,
	0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42,
	0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90,
	0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x74, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37,
	0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03,
	0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31,
	0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03,
	0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69,
	0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41,
	0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x07,
	0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x19, 0xd2, 0xb5, 0x03, 0x15, 0xa2, 0x01, 0x12, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x73, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5f, 0xd2, 0xb5, 0x03, 0x5b, 0xa2, 0x01, 0x58, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c,
	0x67, 0x74, 0x65, 0x3d, 0x32, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f,
	0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x85, 0x10, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2,
	0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30,
	0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x35, 0x30,
	0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x22,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x30, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0x22, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x12, 0x51, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x30, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x91, 0x98, 0xe8, 0xa6, 0x81, 0x22, 0x52, 0x08, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xd2, 0xb5, 0x03, 0x2b, 0xa2, 0x01,
	0x28, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20,
	0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x96, 0x87, 0xe6, 0x9c, 0xac, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x49, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61,
	0x67, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5,
	0xbf, 0x83, 0xe6, 0x83, 0x85, 0x22, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x07,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42,
	0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xa4, 0xa9,
	0xe6, 0xb0, 0x94, 0x22, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x72,
	0x65, 0x61, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x22, 0x52, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x12, 0x4b, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x22, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x23, 0xd2,
	0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe7, 0xad,
	0xbe, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f,
	0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69,
	0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x9e, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x5b, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x22, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8,
	0xaf, 0x84, 0xe8, 0xae, 0xba, 0x22, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5,
	0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6,
	0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5,
	0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31,
	0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12,
	0x74, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0xd2, 0xb5,
	0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f, 0xa5, 0xe7,
	0x9c, 0x8b, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01,
	0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2,
	0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d,
	0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2,
	0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22,
	0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x08, 0x0a,
	0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xe1, 0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0xd2, 0xb5,
	0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x20, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0xd2, 0xb5, 0x03, 0x50, 0xa2, 0x01, 0x4d, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28,
	0x31, 0x30, 0x29, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x67, 0x74, 0x65, 0x3d,
	0x33, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x30, 0x22, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x22, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x22, 0xa2, 0x01, 0x1f, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03,
	0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31,
	0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03,
	0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69,
	0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41,
	0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd3, 0x07, 0x0a, 0x09,
	0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x32, 0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x35, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c,
	0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6,
	0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x22, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x56, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e,
	0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x6e, 0x6f, 0x74, 0x20,
	0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x22, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5,
	0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6,
	0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5,
	0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31,
	0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12,
	0x74, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0xd2, 0xb5,
	0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f, 0xa5, 0xe7,
	0x9c, 0x8b, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0xd2, 0xb5, 0x03, 0x36, 0xa2, 0x01, 0x33, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20,
	0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64,
	0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5,
	0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a,
	0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31,
	0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb5, 0x08, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03,
	0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2, 0xb5, 0x03, 0x2e,
	0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x35, 0x30,
	0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x22, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30,
	0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65,
	0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5,
	0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a,
	0x32, 0x35, 0x35, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2,
	0x22, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03,
	0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69,
	0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba,
	0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf,
	0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a,
	0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c,
	0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d,
	0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90,
	0x22, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0xd2,
	0xb5, 0x03, 0x36, 0xa2, 0x01, 0x33, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e,
	0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2,
	0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30,
	0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2,
	0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd5, 0x0f, 0x0a, 0x05, 0x44, 0x69,
	0x61, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x86, 0x85,
	0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x38, 0xd2,
	0xb5, 0x03, 0x34, 0xa2, 0x01, 0x31, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97, 0xa5, 0xe8, 0xae,
	0xb0, 0xe6, 0x9c, 0xac, 0x49, 0x64, 0x22, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12,
	0x4e, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f,
	0x6b, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x22, 0xa2, 0x01, 0x1f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6,
	0x97, 0xa5, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x22, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12,
	0x49, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42,
	0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xbf, 0x83,
	0xe6, 0x83, 0x85, 0x22, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42, 0x23, 0xd2,
	0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xa4, 0xa9, 0xe6, 0xb0,
	0x94, 0x22, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x72, 0x65, 0x61,
	0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x22, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x12, 0x4b, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c,
	0xb0, 0xe5, 0x8c, 0xba, 0x22, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x71, 0x0a,
	0x0e, 0x61, 0x72, 0x65, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0xd2, 0xb5, 0x03, 0x45, 0xa2, 0x01, 0x42, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x32, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7,
	0x81, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0x31, 0x2d, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0x22,
	0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x50, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54,
	0x61, 0x67, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0xd2, 0xb5, 0x03, 0x36,
	0xa2, 0x01, 0x33, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30,
	0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x61,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01,
	0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x9e, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x22, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x61, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0xd2, 0xb5, 0x03,
	0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x29, 0xd2, 0xb5, 0x03,
	0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0x22, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab,
	0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc,
	0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9,
	0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a,
	0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6,
	0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5,
	0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a,
	0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31,
	0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb8, 0x08, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03,
	0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03,
	0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4e, 0xd2, 0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74,
	0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2,
	0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98,
	0x22, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2,
	0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8,
	0xbf, 0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69,
	0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb0, 0x81,
	0xe9, 0x9d, 0xa2, 0x22, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a,
	0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90,
	0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb,
	0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f,
	0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf,
	0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52,
	0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x22, 0xa2, 0x01, 0x1f, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x85, 0xb3, 0xe6, 0xb3, 0xa8, 0xe4, 0xba, 0xba, 0x22, 0x52, 0x0b, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5,
	0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30,
	0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe6, 0x02, 0x0a,
	0x09, 0x46, 0x61, 0x76, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x61,
	0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2,
	0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x52, 0x05, 0x66, 0x61, 0x76, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x48, 0xd2, 0xb5, 0x03,
	0x44, 0xa2, 0x01, 0x41, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32,
	0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x3a, 0x69, 0x64, 0x78, 0x5f, 0x66, 0x61, 0x76, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x20, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x53, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28,
	0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29,
	0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x47, 0x0a, 0x1a, 0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x69, 0x6f, 0x76, 0x2f, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_content_model_proto_rawDescOnce sync.Once
	file_content_content_model_proto_rawDescData = file_content_content_model_proto_rawDesc
)

func file_content_content_model_proto_rawDescGZIP() []byte {
	file_content_content_model_proto_rawDescOnce.Do(func() {
		file_content_content_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_content_model_proto_rawDescData)
	})
	return file_content_content_model_proto_rawDescData
}

var file_content_content_model_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_content_content_model_proto_goTypes = []interface{}{
	(*Tag)(nil),               // 0: content.Tag
	(*TagGroup)(nil),          // 1: content.TagGroup
	(*TagGroupRel)(nil),       // 2: content.TagGroupRel
	(*ContentTag)(nil),        // 3: content.ContentTag
	(*Category)(nil),          // 4: content.Category
	(*Attributes)(nil),        // 5: content.Attributes
	(*AttrGroup)(nil),         // 6: content.AttrGroup
	(*ContentAttr)(nil),       // 7: content.ContentAttr
	(*Content)(nil),           // 8: content.Content
	(*Media)(nil),             // 9: content.Media
	(*Moment)(nil),            // 10: content.Moment
	(*TinyTag)(nil),           // 11: content.TinyTag
	(*Article)(nil),           // 12: content.Article
	(*Serial)(nil),            // 13: content.Serial
	(*Note)(nil),              // 14: content.Note
	(*DiaryBook)(nil),         // 15: content.DiaryBook
	(*Container)(nil),         // 16: content.Container
	(*Diary)(nil),             // 17: content.Diary
	(*Favorites)(nil),         // 18: content.Favorites
	(*FavFollow)(nil),         // 19: content.FavFollow
	(TagType)(0),              // 20: content.TagType
	(ContentType)(0),          // 21: content.ContentType
	(AttrType)(0),             // 22: content.AttrType
	(*area.Area)(nil),         // 23: area.Area
	(*user.UserBaseInfo)(nil), // 24: user.UserBaseInfo
	(*Comment)(nil),           // 25: content.Comment
	(ViewPermission)(0),       // 26: content.ViewPermission
	(MomentType)(0),           // 27: content.MomentType
	(*ContentExt)(nil),        // 28: content.ContentExt
	(ContainerType)(0),        // 29: content.ContainerType
	(*Collection)(nil),        // 30: content.Collection
}
var file_content_content_model_proto_depIdxs = []int32{
	20, // 0: content.Tag.type:type_name -> content.TagType
	21, // 1: content.ContentTag.type:type_name -> content.ContentType
	21, // 2: content.ContentAttr.contentType:type_name -> content.ContentType
	22, // 3: content.ContentAttr.type:type_name -> content.AttrType
	21, // 4: content.Content.type:type_name -> content.ContentType
	0,  // 5: content.Content.mood:type_name -> content.Tag
	0,  // 6: content.Content.weather:type_name -> content.Tag
	23, // 7: content.Content.area:type_name -> area.Area
	0,  // 8: content.Content.tags:type_name -> content.Tag
	24, // 9: content.Content.user:type_name -> user.UserBaseInfo
	24, // 10: content.Content.approveUsers:type_name -> user.UserBaseInfo
	24, // 11: content.Content.collectUsers:type_name -> user.UserBaseInfo
	24, // 12: content.Content.likeUsers:type_name -> user.UserBaseInfo
	25, // 13: content.Content.comments:type_name -> content.Comment
	26, // 14: content.Content.permission:type_name -> content.ViewPermission
	15, // 15: content.Moment.book:type_name -> content.DiaryBook
	27, // 16: content.Moment.type:type_name -> content.MomentType
	11, // 17: content.Moment.mood:type_name -> content.TinyTag
	11, // 18: content.Moment.weather:type_name -> content.TinyTag
	23, // 19: content.Moment.area:type_name -> area.Area
	11, // 20: content.Moment.tags:type_name -> content.TinyTag
	24, // 21: content.Moment.user:type_name -> user.UserBaseInfo
	25, // 22: content.Moment.comments:type_name -> content.Comment
	24, // 23: content.Moment.users:type_name -> user.UserBaseInfo
	28, // 24: content.Moment.ext:type_name -> content.ContentExt
	26, // 25: content.Moment.permission:type_name -> content.ViewPermission
	20, // 26: content.TinyTag.type:type_name -> content.TagType
	11, // 27: content.Article.mood:type_name -> content.TinyTag
	11, // 28: content.Article.weather:type_name -> content.TinyTag
	23, // 29: content.Article.area:type_name -> area.Area
	0,  // 30: content.Article.tags:type_name -> content.Tag
	24, // 31: content.Article.user:type_name -> user.UserBaseInfo
	24, // 32: content.Article.approveUsers:type_name -> user.UserBaseInfo
	24, // 33: content.Article.collectUsers:type_name -> user.UserBaseInfo
	24, // 34: content.Article.likeUsers:type_name -> user.UserBaseInfo
	25, // 35: content.Article.comments:type_name -> content.Comment
	26, // 36: content.Article.permission:type_name -> content.ViewPermission
	26, // 37: content.DiaryBook.permission:type_name -> content.ViewPermission
	29, // 38: content.Container.type:type_name -> content.ContainerType
	26, // 39: content.Container.permission:type_name -> content.ViewPermission
	15, // 40: content.Diary.book:type_name -> content.DiaryBook
	11, // 41: content.Diary.mood:type_name -> content.TinyTag
	11, // 42: content.Diary.weather:type_name -> content.TinyTag
	23, // 43: content.Diary.area:type_name -> area.Area
	11, // 44: content.Diary.tags:type_name -> content.TinyTag
	24, // 45: content.Diary.user:type_name -> user.UserBaseInfo
	24, // 46: content.Diary.approveUsers:type_name -> user.UserBaseInfo
	24, // 47: content.Diary.collectUsers:type_name -> user.UserBaseInfo
	24, // 48: content.Diary.likeUsers:type_name -> user.UserBaseInfo
	25, // 49: content.Diary.comments:type_name -> content.Comment
	26, // 50: content.Diary.permission:type_name -> content.ViewPermission
	24, // 51: content.Favorites.user:type_name -> user.UserBaseInfo
	24, // 52: content.Favorites.followUsers:type_name -> user.UserBaseInfo
	30, // 53: content.Favorites.collections:type_name -> content.Collection
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_content_content_model_proto_init() }
func file_content_content_model_proto_init() {
	if File_content_content_model_proto != nil {
		return
	}
	file_content_content_enum_proto_init()
	file_content_action_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_content_content_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagGroupRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Moment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TinyTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Serial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiaryBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Favorites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavFollow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_content_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_content_content_model_proto_goTypes,
		DependencyIndexes: file_content_content_model_proto_depIdxs,
		MessageInfos:      file_content_content_model_proto_msgTypes,
	}.Build()
	File_content_content_model_proto = out.File
	file_content_content_model_proto_rawDesc = nil
	file_content_content_model_proto_goTypes = nil
	file_content_content_model_proto_depIdxs = nil
}
