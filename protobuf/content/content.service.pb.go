// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: content/content.service.proto

package content

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	user "github.com/liov/tiga/protobuf/user"
	empty "github.com/liov/tiga/protobuf/utils/empty"
	_ "github.com/liov/tiga/protobuf/utils/oauth"
	_ "github.com/liov/tiga/protobuf/utils/proto"
	_ "github.com/liov/tiga/protobuf/utils/proto/gogo"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	request "github.com/liov/tiga/protobuf/utils/request"
	_ "github.com/liov/tiga/protobuf/utils/response"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" annotation:"名称"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" annotation:"描述"`
	ExpressionURL string `protobuf:"bytes,4,opt,name=expressionURL,proto3" json:"expressionURL,omitempty" annotation:"表情url"`
	UserId        uint64 `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
}

func (x *AddTagReq) Reset() {
	*x = AddTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagReq) ProtoMessage() {}

func (x *AddTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagReq.ProtoReflect.Descriptor instead.
func (*AddTagReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddTagReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTagReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddTagReq) GetExpressionURL() string {
	if x != nil {
		return x.ExpressionURL
	}
	return ""
}

func (x *AddTagReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type EditTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" annotation:"名称"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" annotation:"描述"`
	ExpressionURL string `protobuf:"bytes,4,opt,name=expressionURL,proto3" json:"expressionURL,omitempty" annotation:"表情url"`
}

func (x *EditTagReq) Reset() {
	*x = EditTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTagReq) ProtoMessage() {}

func (x *EditTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTagReq.ProtoReflect.Descriptor instead.
func (*EditTagReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{1}
}

func (x *EditTagReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditTagReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditTagReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EditTagReq) GetExpressionURL() string {
	if x != nil {
		return x.ExpressionURL
	}
	return ""
}

type TagListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" annotation:"名称"`
	Type     TagType `protobuf:"varint,2,opt,name=type,proto3,enum=content.TagType" json:"type,omitempty" validate:"required" annotation:"标签类型"`
	PageNo   uint32  `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *TagListReq) Reset() {
	*x = TagListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListReq) ProtoMessage() {}

func (x *TagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListReq.ProtoReflect.Descriptor instead.
func (*TagListReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{2}
}

func (x *TagListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagListReq) GetType() TagType {
	if x != nil {
		return x.Type
	}
	return TagPlaceholder
}

func (x *TagListReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TagListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TagListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Tag `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TagListRep) Reset() {
	*x = TagListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListRep) ProtoMessage() {}

func (x *TagListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListRep.ProtoReflect.Descriptor instead.
func (*TagListRep) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{3}
}

func (x *TagListRep) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagListRep) GetList() []*Tag {
	if x != nil {
		return x.List
	}
	return nil
}

type TagGroupListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     TagType `protobuf:"varint,2,opt,name=type,proto3,enum=content.TagType" json:"type,omitempty" validate:"required" annotation:"标签类型"`
	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" annotation:"名称"`
	PageNo   uint32  `protobuf:"varint,3,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *TagGroupListReq) Reset() {
	*x = TagGroupListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagGroupListReq) ProtoMessage() {}

func (x *TagGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagGroupListReq.ProtoReflect.Descriptor instead.
func (*TagGroupListReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{4}
}

func (x *TagGroupListReq) GetType() TagType {
	if x != nil {
		return x.Type
	}
	return TagPlaceholder
}

func (x *TagGroupListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagGroupListReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *TagGroupListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TagGroupListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Data  map[int32]*TagListRep `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TagGroupListRep) Reset() {
	*x = TagGroupListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagGroupListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagGroupListRep) ProtoMessage() {}

func (x *TagGroupListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagGroupListRep.ProtoReflect.Descriptor instead.
func (*TagGroupListRep) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{5}
}

func (x *TagGroupListRep) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagGroupListRep) GetData() map[int32]*TagListRep {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddAttrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          AttrType `protobuf:"varint,4,opt,name=type,proto3,enum=content.AttrType" json:"type,omitempty" annotation:"属性相关类型"`
	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" annotation:"名称"`
	Description   string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" annotation:"描述"`
	ExpressionURL string   `protobuf:"bytes,3,opt,name=expressionURL,proto3" json:"expressionURL,omitempty" annotation:"表情url"`
}

func (x *AddAttrReq) Reset() {
	*x = AddAttrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAttrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAttrReq) ProtoMessage() {}

func (x *AddAttrReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAttrReq.ProtoReflect.Descriptor instead.
func (*AddAttrReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{6}
}

func (x *AddAttrReq) GetType() AttrType {
	if x != nil {
		return x.Type
	}
	return AttrPlaceholder
}

func (x *AddAttrReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddAttrReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddAttrReq) GetExpressionURL() string {
	if x != nil {
		return x.ExpressionURL
	}
	return ""
}

type EditAttrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" annotation:"名称"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" annotation:"描述"`
	ExpressionURL string `protobuf:"bytes,4,opt,name=expressionURL,proto3" json:"expressionURL,omitempty" annotation:"表情url"`
}

func (x *EditAttrReq) Reset() {
	*x = EditAttrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditAttrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAttrReq) ProtoMessage() {}

func (x *EditAttrReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAttrReq.ProtoReflect.Descriptor instead.
func (*EditAttrReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{7}
}

func (x *EditAttrReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditAttrReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditAttrReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EditAttrReq) GetExpressionURL() string {
	if x != nil {
		return x.ExpressionURL
	}
	return ""
}

type AttrListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AttrType `protobuf:"varint,2,opt,name=type,proto3,enum=content.AttrType" json:"type,omitempty" annotation:"属性相关类型"`
	Name string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" annotation:"名称"`
}

func (x *AttrListReq) Reset() {
	*x = AttrListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrListReq) ProtoMessage() {}

func (x *AttrListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrListReq.ProtoReflect.Descriptor instead.
func (*AttrListReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{8}
}

func (x *AttrListReq) GetType() AttrType {
	if x != nil {
		return x.Type
	}
	return AttrPlaceholder
}

func (x *AttrListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AttrListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Attributes `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AttrListRep) Reset() {
	*x = AttrListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrListRep) ProtoMessage() {}

func (x *AttrListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrListRep.ProtoReflect.Descriptor instead.
func (*AttrListRep) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{9}
}

func (x *AttrListRep) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AttrListRep) GetList() []*Attributes {
	if x != nil {
		return x.List
	}
	return nil
}

type AddFavReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	UserId      uint64 `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" gorm:"size:10;not null" annotation:"标题"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" gorm:"type:text;not null" annotation:"描述"`
	Cover       string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty" gorm:"size:255;not null" annotation:"封面"`
	Sequence    uint32 `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous   uint32 `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
}

func (x *AddFavReq) Reset() {
	*x = AddFavReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFavReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFavReq) ProtoMessage() {}

func (x *AddFavReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFavReq.ProtoReflect.Descriptor instead.
func (*AddFavReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{10}
}

func (x *AddFavReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddFavReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddFavReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddFavReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddFavReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *AddFavReq) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AddFavReq) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

type AddContainerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	UserId      uint64        `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	Type        ContainerType `protobuf:"varint,2,opt,name=type,proto3,enum=content.ContainerType" json:"type,omitempty" gorm:"type:int2;not null" annotation:"类型"`
	Title       string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" gorm:"size:10;not null" annotation:"标题"`
	Description string        `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" gorm:"type:text;not null" annotation:"描述"`
	Cover       string        `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty" gorm:"size:255;not null" annotation:"封面"`
	Sequence    uint32        `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous   uint32        `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
}

func (x *AddContainerReq) Reset() {
	*x = AddContainerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContainerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContainerReq) ProtoMessage() {}

func (x *AddContainerReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContainerReq.ProtoReflect.Descriptor instead.
func (*AddContainerReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{11}
}

func (x *AddContainerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddContainerReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddContainerReq) GetType() ContainerType {
	if x != nil {
		return x.Type
	}
	return ContainerTypePlaceholder
}

func (x *AddContainerReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddContainerReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddContainerReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *AddContainerReq) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AddContainerReq) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

type FavListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty" annotation:"权限,0-自己可写的，1-可读写"`
}

func (x *FavListReq) Reset() {
	*x = FavListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavListReq) ProtoMessage() {}

func (x *FavListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavListReq.ProtoReflect.Descriptor instead.
func (*FavListReq) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{12}
}

func (x *FavListReq) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FavListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Favorites `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FavListRep) Reset() {
	*x = FavListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavListRep) ProtoMessage() {}

func (x *FavListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavListRep.ProtoReflect.Descriptor instead.
func (*FavListRep) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{13}
}

func (x *FavListRep) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FavListRep) GetList() []*Favorites {
	if x != nil {
		return x.List
	}
	return nil
}

type TinyFavListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TinyFavorites `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TinyFavListRep) Reset() {
	*x = TinyFavListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TinyFavListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TinyFavListRep) ProtoMessage() {}

func (x *TinyFavListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TinyFavListRep.ProtoReflect.Descriptor instead.
func (*TinyFavListRep) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{14}
}

func (x *TinyFavListRep) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TinyFavListRep) GetList() []*TinyFavorites {
	if x != nil {
		return x.List
	}
	return nil
}

type TinyFavorites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" gorm:"size:10;not null" annotation:"标题"`
}

func (x *TinyFavorites) Reset() {
	*x = TinyFavorites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_content_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TinyFavorites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TinyFavorites) ProtoMessage() {}

func (x *TinyFavorites) ProtoReflect() protoreflect.Message {
	mi := &file_content_content_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TinyFavorites.ProtoReflect.Descriptor instead.
func (*TinyFavorites) Descriptor() ([]byte, []int) {
	return file_content_content_service_proto_rawDescGZIP(), []int{15}
}

func (x *TinyFavorites) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TinyFavorites) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_content_content_service_proto protoreflect.FileDescriptor

var file_content_content_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x22,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03,
	0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xd2, 0xb5, 0x03,
	0x19, 0xa2, 0x01, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2,
	0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2,
	0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xd2, 0xb5, 0x03, 0x19, 0xa2, 0x01, 0x16, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0x75,
	0x72, 0x6c, 0x22, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x44, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x5a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x34, 0xd2, 0xb5, 0x03,
	0x30, 0xa2, 0x01, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0f,
	0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x02, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x26, 0xd2, 0xb5, 0x03,
	0x22, 0xa2, 0x01, 0x1f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xd2, 0xb5, 0x03, 0x19, 0xa2, 0x01, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0xec, 0x01, 0x0a,
	0x0b, 0x45, 0x64, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01,
	0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2,
	0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xd2,
	0xb5, 0x03, 0x19, 0xa2, 0x01, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe8, 0xa1, 0xa8, 0xe6, 0x83, 0x85, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0x8c, 0x01, 0x0a, 0x0b,
	0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x26, 0xd2, 0xb5,
	0x03, 0x22, 0xa2, 0x01, 0x1f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01,
	0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8d,
	0xe7, 0xa7, 0xb0, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x0b, 0x41, 0x74,
	0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xce, 0x04, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22,
	0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2, 0xb5,
	0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a,
	0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x22,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5,
	0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb0, 0x81, 0xe9,
	0x9d, 0xa2, 0x22, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2,
	0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c,
	0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5,
	0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef,
	0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5,
	0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0xb6, 0x05, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2,
	0x01, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2,
	0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30,
	0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20,
	0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x22, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x56, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x6e, 0x6f,
	0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x6e,
	0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x22, 0x52, 0x05, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7,
	0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6,
	0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1,
	0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6,
	0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98,
	0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x22, 0x60, 0x0a, 0x0a, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x52, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x3a, 0xd2, 0xb5, 0x03, 0x36, 0xa2, 0x01, 0x33, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x2c, 0x30, 0x2d, 0xe8, 0x87,
	0xaa, 0xe5, 0xb7, 0xb1, 0xe5, 0x8f, 0xaf, 0xe5, 0x86, 0x99, 0xe7, 0x9a, 0x84, 0xef, 0xbc, 0x8c,
	0x31, 0x2d, 0xe5, 0x8f, 0xaf, 0xe8, 0xaf, 0xbb, 0xe5, 0x86, 0x99, 0x22, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0a, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x52, 0x0a, 0x0e, 0x54, 0x69, 0x6e, 0x79, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x69, 0x6e, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x6e, 0x79, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x32, 0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01, 0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69,
	0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9,
	0xa2, 0x98, 0x22, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0xf9, 0x0c, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a,
	0x07, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31,
	0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x58, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x67, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x61, 0x67,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e,
	0x01, 0x12, 0x5f, 0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x54, 0x61, 0x67, 0x12, 0x13, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8,
	0x3e, 0x01, 0x12, 0x5e, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x61, 0x67, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8,
	0x3e, 0x00, 0x12, 0x72, 0x0a, 0x0c, 0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e,
	0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x61, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06,
	0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x5e, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06,
	0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x62, 0x0a, 0x08, 0x45, 0x64, 0x69,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x62, 0x0a,
	0x08, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e,
	0x00, 0x12, 0x67, 0x0a, 0x07, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x76, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x66, 0x61, 0x76, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a,
	0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x73, 0x0a, 0x0b, 0x54, 0x69,
	0x6e, 0x79, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x46, 0x61, 0x76,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x69, 0x6e, 0x79, 0x46, 0x61, 0x76, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12,
	0x58, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x61, 0x76, 0x92, 0x41, 0x08, 0x0a, 0x06,
	0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x5b, 0x0a, 0x07, 0x45, 0x64, 0x69,
	0x74, 0x46, 0x61, 0x76, 0x12, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x1a, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x66, 0x61, 0x76, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e,
	0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x67, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12,
	0x72, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x44, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30,
	0xc8, 0x3e, 0x01, 0x12, 0x68, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92,
	0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x1a, 0x17, 0x92,
	0x41, 0x14, 0x12, 0x12, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3,
	0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x42, 0x47, 0x0a, 0x1a, 0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x69, 0x6f, 0x76, 0x2f, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_content_service_proto_rawDescOnce sync.Once
	file_content_content_service_proto_rawDescData = file_content_content_service_proto_rawDesc
)

func file_content_content_service_proto_rawDescGZIP() []byte {
	file_content_content_service_proto_rawDescOnce.Do(func() {
		file_content_content_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_content_service_proto_rawDescData)
	})
	return file_content_content_service_proto_rawDescData
}

var file_content_content_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_content_content_service_proto_goTypes = []interface{}{
	(*AddTagReq)(nil),        // 0: content.AddTagReq
	(*EditTagReq)(nil),       // 1: content.EditTagReq
	(*TagListReq)(nil),       // 2: content.TagListReq
	(*TagListRep)(nil),       // 3: content.TagListRep
	(*TagGroupListReq)(nil),  // 4: content.TagGroupListReq
	(*TagGroupListRep)(nil),  // 5: content.TagGroupListRep
	(*AddAttrReq)(nil),       // 6: content.AddAttrReq
	(*EditAttrReq)(nil),      // 7: content.EditAttrReq
	(*AttrListReq)(nil),      // 8: content.AttrListReq
	(*AttrListRep)(nil),      // 9: content.AttrListRep
	(*AddFavReq)(nil),        // 10: content.AddFavReq
	(*AddContainerReq)(nil),  // 11: content.AddContainerReq
	(*FavListReq)(nil),       // 12: content.FavListReq
	(*FavListRep)(nil),       // 13: content.FavListRep
	(*TinyFavListRep)(nil),   // 14: content.TinyFavListRep
	(*TinyFavorites)(nil),    // 15: content.TinyFavorites
	nil,                      // 16: content.TagGroupListRep.DataEntry
	(TagType)(0),             // 17: content.TagType
	(*Tag)(nil),              // 18: content.Tag
	(AttrType)(0),            // 19: content.AttrType
	(*Attributes)(nil),       // 20: content.Attributes
	(ContainerType)(0),       // 21: content.ContainerType
	(*Favorites)(nil),        // 22: content.Favorites
	(*request.Object)(nil),   // 23: request.Object
	(*empty.Empty)(nil),      // 24: empty.Empty
	(*user.UserContent)(nil), // 25: user.UserContent
}
var file_content_content_service_proto_depIdxs = []int32{
	17, // 0: content.TagListReq.type:type_name -> content.TagType
	18, // 1: content.TagListRep.list:type_name -> content.Tag
	17, // 2: content.TagGroupListReq.type:type_name -> content.TagType
	16, // 3: content.TagGroupListRep.data:type_name -> content.TagGroupListRep.DataEntry
	19, // 4: content.AddAttrReq.type:type_name -> content.AttrType
	19, // 5: content.AttrListReq.type:type_name -> content.AttrType
	20, // 6: content.AttrListRep.list:type_name -> content.Attributes
	21, // 7: content.AddContainerReq.type:type_name -> content.ContainerType
	22, // 8: content.FavListRep.list:type_name -> content.Favorites
	15, // 9: content.TinyFavListRep.list:type_name -> content.TinyFavorites
	3,  // 10: content.TagGroupListRep.DataEntry.value:type_name -> content.TagListRep
	23, // 11: content.ContentService.TagInfo:input_type -> request.Object
	0,  // 12: content.ContentService.AddTag:input_type -> content.AddTagReq
	1,  // 13: content.ContentService.EditTag:input_type -> content.EditTagReq
	2,  // 14: content.ContentService.TagList:input_type -> content.TagListReq
	4,  // 15: content.ContentService.TagGroupList:input_type -> content.TagGroupListReq
	23, // 16: content.ContentService.AttrInfo:input_type -> request.Object
	6,  // 17: content.ContentService.AddAttr:input_type -> content.AddAttrReq
	7,  // 18: content.ContentService.EditAttr:input_type -> content.EditAttrReq
	8,  // 19: content.ContentService.AttrList:input_type -> content.AttrListReq
	12, // 20: content.ContentService.FavList:input_type -> content.FavListReq
	12, // 21: content.ContentService.TinyFavList:input_type -> content.FavListReq
	10, // 22: content.ContentService.AddFav:input_type -> content.AddFavReq
	10, // 23: content.ContentService.EditFav:input_type -> content.AddFavReq
	11, // 24: content.ContentService.AddContainer:input_type -> content.AddContainerReq
	11, // 25: content.ContentService.EditDiaryContainer:input_type -> content.AddContainerReq
	23, // 26: content.ContentService.UserContentCount:input_type -> request.Object
	18, // 27: content.ContentService.TagInfo:output_type -> content.Tag
	24, // 28: content.ContentService.AddTag:output_type -> empty.Empty
	24, // 29: content.ContentService.EditTag:output_type -> empty.Empty
	3,  // 30: content.ContentService.TagList:output_type -> content.TagListRep
	5,  // 31: content.ContentService.TagGroupList:output_type -> content.TagGroupListRep
	20, // 32: content.ContentService.AttrInfo:output_type -> content.Attributes
	23, // 33: content.ContentService.AddAttr:output_type -> request.Object
	24, // 34: content.ContentService.EditAttr:output_type -> empty.Empty
	9,  // 35: content.ContentService.AttrList:output_type -> content.AttrListRep
	13, // 36: content.ContentService.FavList:output_type -> content.FavListRep
	14, // 37: content.ContentService.TinyFavList:output_type -> content.TinyFavListRep
	23, // 38: content.ContentService.AddFav:output_type -> request.Object
	24, // 39: content.ContentService.EditFav:output_type -> empty.Empty
	24, // 40: content.ContentService.AddContainer:output_type -> empty.Empty
	24, // 41: content.ContentService.EditDiaryContainer:output_type -> empty.Empty
	25, // 42: content.ContentService.UserContentCount:output_type -> user.UserContent
	27, // [27:43] is the sub-list for method output_type
	11, // [11:27] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_content_content_service_proto_init() }
func file_content_content_service_proto_init() {
	if File_content_content_service_proto != nil {
		return
	}
	file_content_content_model_proto_init()
	file_content_content_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_content_content_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagGroupListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagGroupListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAttrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditAttrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFavReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContainerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TinyFavListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_content_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TinyFavorites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_content_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_content_service_proto_goTypes,
		DependencyIndexes: file_content_content_service_proto_depIdxs,
		MessageInfos:      file_content_content_service_proto_msgTypes,
	}.Build()
	File_content_content_service_proto = out.File
	file_content_content_service_proto_rawDesc = nil
	file_content_content_service_proto_goTypes = nil
	file_content_content_service_proto_depIdxs = nil
}
