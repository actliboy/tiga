// Code generated by protoc-gen-grpc-gin. DO NOT EDIT.
// source: content/action.service.proto

/*
Package content is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package content

import (
	"context"
	"io"

	"github.com/gin-gonic/gin"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	request_0 "github.com/liov/tiga/protobuf/utils/request"
	gin_0 "github.com/liov/tiga/utils/net/http/gin"
	"github.com/liov/tiga/utils/net/http/grpc/gateway"
	"github.com/liov/tiga/utils/net/http/request"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join
var _ = request.Error

func request_ActionService_Like_0(ctx *gin.Context, client ActionServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq LikeReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.Like(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ActionService_Like_0(server ActionServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq LikeReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.Like(ctx.Request.Context(), &protoReq)

}

func request_ActionService_DelLike_0(ctx *gin.Context, client ActionServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq request_0.Object
	var metadata runtime.ServerMetadata

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	msg, err := client.DelLike(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ActionService_DelLike_0(server ActionServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq request_0.Object

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	return server.DelLike(ctx.Request.Context(), &protoReq)

}

func request_ActionService_Comment_0(ctx *gin.Context, client ActionServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CommentReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.Comment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ActionService_Comment_0(server ActionServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq CommentReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.Comment(ctx.Request.Context(), &protoReq)

}

func request_ActionService_CommentList_0(ctx *gin.Context, client ActionServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CommentListReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.CommentList(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ActionService_CommentList_0(server ActionServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq CommentListReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.CommentList(ctx.Request.Context(), &protoReq)

}

func request_ActionService_DelComment_0(ctx *gin.Context, client ActionServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq request_0.Object
	var metadata runtime.ServerMetadata

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	msg, err := client.DelComment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ActionService_DelComment_0(server ActionServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq request_0.Object

	var (
		err error
		_   = err
	)

	protoReq.Id, err = runtime.Uint64(ctx.Param("id"))
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "id", request.Error(err))
	}

	return server.DelComment(ctx.Request.Context(), &protoReq)

}

func request_ActionService_Collect_0(ctx *gin.Context, client ActionServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CollectReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.Collect(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ActionService_Collect_0(server ActionServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq CollectReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.Collect(ctx.Request.Context(), &protoReq)

}

func request_ActionService_Report_0(ctx *gin.Context, client ActionServiceClient) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ReportReq
	var metadata runtime.ServerMetadata

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, metadata, err
	}

	msg, err := client.Report(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ActionService_Report_0(server ActionServiceServer, ctx *gin.Context) (proto.Message, error) {
	var protoReq ReportReq

	if err := gin_0.Bind(ctx, &protoReq); err != nil {
		return nil, err
	}

	return server.Report(ctx.Request.Context(), &protoReq)

}

// RegisterActionServiceHandlerServer registers the http handlers for service ActionService to "mux".
// UnaryRPC     :call ActionServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterActionServiceHandlerFromEndpoint instead.
func RegisterActionServiceHandlerServer(mux *gin.Engine, server ActionServiceServer) error {

	mux.Handle("POST", "/api/v1/action/like", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_ActionService_Like_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("DELETE", "/api/v1/action/like/:id", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_ActionService_DelLike_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/action/comment", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_ActionService_Comment_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/action/comment", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_ActionService_CommentList_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("DELETE", "/api/v1/action/comment/:id", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_ActionService_DelComment_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/action/collect", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_ActionService_Collect_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/action/report", func(ctx *gin.Context) {
		var md runtime.ServerMetadata
		resp, err := local_request_ActionService_Report_0(server, ctx)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	return nil
}

// RegisterActionServiceHandlerFromEndpoint is same as RegisterActionServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterActionServiceHandlerFromEndpoint(ctx context.Context, mux *gin.Engine, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterActionServiceHandler(ctx, mux, conn)
}

// RegisterActionServiceHandler registers the http handlers for service ActionService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterActionServiceHandler(ctx context.Context, mux *gin.Engine, conn *grpc.ClientConn) error {
	return RegisterActionServiceHandlerClient(ctx, mux, NewActionServiceClient(conn))
}

// RegisterActionServiceHandlerClient registers the http handlers for service ActionService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ActionServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ActionServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ActionServiceClient" to call the correct interceptors.
func RegisterActionServiceHandlerClient(ctx context.Context, mux *gin.Engine, client ActionServiceClient) error {

	mux.Handle("POST", "/api/v1/action/like", func(ctx *gin.Context) {
		resp, md, err := request_ActionService_Like_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("DELETE", "/api/v1/action/like/:id", func(ctx *gin.Context) {
		resp, md, err := request_ActionService_DelLike_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/action/comment", func(ctx *gin.Context) {
		resp, md, err := request_ActionService_Comment_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("GET", "/api/v1/action/comment", func(ctx *gin.Context) {
		resp, md, err := request_ActionService_CommentList_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("DELETE", "/api/v1/action/comment/:id", func(ctx *gin.Context) {
		resp, md, err := request_ActionService_DelComment_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/action/collect", func(ctx *gin.Context) {
		resp, md, err := request_ActionService_Collect_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	mux.Handle("POST", "/api/v1/action/report", func(ctx *gin.Context) {
		resp, md, err := request_ActionService_Report_0(ctx, client)
		if err != nil {
			gateway.HTTPError(ctx, err)
			return
		}

		gateway.ForwardResponseMessage(ctx, md, resp)

	})

	return nil
}
