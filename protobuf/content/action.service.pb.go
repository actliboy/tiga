// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: content/action.service.proto

package content

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	user "github.com/liov/tiga/protobuf/user"
	empty "github.com/liov/tiga/protobuf/utils/empty"
	_ "github.com/liov/tiga/protobuf/utils/oauth"
	_ "github.com/liov/tiga/protobuf/utils/proto/gogo"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	request "github.com/liov/tiga/protobuf/utils/request"
	_ "github.com/liov/tiga/protobuf/utils/response"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LikeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64      `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Type   ContentType `protobuf:"varint,1,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" annotation:"内容类型"`
	RefId  uint64      `protobuf:"varint,2,opt,name=refId,proto3" json:"refId,omitempty" annotation:"相关id"`
	Action ActionType  `protobuf:"varint,3,opt,name=action,proto3,enum=content.ActionType" json:"action,omitempty" annotation:"动作类型"`
	UserId uint64      `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
}

func (x *LikeReq) Reset() {
	*x = LikeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeReq) ProtoMessage() {}

func (x *LikeReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeReq.ProtoReflect.Descriptor instead.
func (*LikeReq) Descriptor() ([]byte, []int) {
	return file_content_action_service_proto_rawDescGZIP(), []int{0}
}

func (x *LikeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LikeReq) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *LikeReq) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *LikeReq) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionPlaceholder
}

func (x *LikeReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     ContentType        `protobuf:"varint,12,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" validate:"required" annotation:"相关类型"`
	RefId    uint64             `protobuf:"varint,6,opt,name=refId,proto3" json:"refId,omitempty" validate:"required" annotation:"相关id"`
	User     *user.UserBaseInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" annotation:"用户"`
	UserId   uint64             `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	Content  string             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty" annotation:"内容"`
	Image    string             `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty" annotation:"图片"`
	ReplyId  uint64             `protobuf:"varint,7,opt,name=replyId,proto3" json:"replyId,omitempty" annotation:"回复id"`
	RootId   uint64             `protobuf:"varint,8,opt,name=rootId,proto3" json:"rootId,omitempty" annotation:"评论根id"`
	RecvId   uint64             `protobuf:"varint,10,opt,name=recvId,proto3" json:"recvId,omitempty" validate:"required" annotation:"接收人id"`
	Sequence uint32             `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
}

func (x *CommentReq) Reset() {
	*x = CommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentReq) ProtoMessage() {}

func (x *CommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentReq.ProtoReflect.Descriptor instead.
func (*CommentReq) Descriptor() ([]byte, []int) {
	return file_content_action_service_proto_rawDescGZIP(), []int{1}
}

func (x *CommentReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommentReq) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *CommentReq) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *CommentReq) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CommentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CommentReq) GetReplyId() uint64 {
	if x != nil {
		return x.ReplyId
	}
	return 0
}

func (x *CommentReq) GetRootId() uint64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *CommentReq) GetRecvId() uint64 {
	if x != nil {
		return x.RecvId
	}
	return 0
}

func (x *CommentReq) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type CommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ContentType `protobuf:"varint,1,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" annotation:"内容类型"`
	RefId    uint64      `protobuf:"varint,2,opt,name=refId,proto3" json:"refId,omitempty" annotation:"相关id"`
	RootId   uint64      `protobuf:"varint,3,opt,name=rootId,proto3" json:"rootId,omitempty" annotation:"评论根节点"`
	PageNo   uint32      `protobuf:"varint,4,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint32      `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *CommentListReq) Reset() {
	*x = CommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListReq) ProtoMessage() {}

func (x *CommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListReq.ProtoReflect.Descriptor instead.
func (*CommentListReq) Descriptor() ([]byte, []int) {
	return file_content_action_service_proto_rawDescGZIP(), []int{2}
}

func (x *CommentListReq) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *CommentListReq) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *CommentListReq) GetRootId() uint64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *CommentListReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *CommentListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CommentListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Comment           `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Users []*user.UserBaseInfo `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *CommentListRep) Reset() {
	*x = CommentListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentListRep) ProtoMessage() {}

func (x *CommentListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentListRep.ProtoReflect.Descriptor instead.
func (*CommentListRep) Descriptor() ([]byte, []int) {
	return file_content_action_service_proto_rawDescGZIP(), []int{3}
}

func (x *CommentListRep) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommentListRep) GetList() []*Comment {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommentListRep) GetUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type CollectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type   ContentType `protobuf:"varint,12,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" gorm:"type:int2;not null" validate:"required" annotation:"相关类型"`
	RefId  uint64      `protobuf:"varint,6,opt,name=refId,proto3" json:"refId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"相关id"`
	UserId uint64      `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	FavIds []uint64    `protobuf:"varint,3,rep,packed,name=favIds,proto3" json:"favIds,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"用户id"`
}

func (x *CollectReq) Reset() {
	*x = CollectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectReq) ProtoMessage() {}

func (x *CollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectReq.ProtoReflect.Descriptor instead.
func (*CollectReq) Descriptor() ([]byte, []int) {
	return file_content_action_service_proto_rawDescGZIP(), []int{4}
}

func (x *CollectReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CollectReq) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *CollectReq) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *CollectReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CollectReq) GetFavIds() []uint64 {
	if x != nil {
		return x.FavIds
	}
	return nil
}

type ReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      ContentType `protobuf:"varint,12,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" gorm:"type:int2;not null" validate:"required" annotation:"相关类型"`
	RefId     uint64      `protobuf:"varint,6,opt,name=refId,proto3" json:"refId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"相关id"`
	UserId    uint64      `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	DelReason DelReason   `protobuf:"varint,3,opt,name=delReason,proto3,enum=content.DelReason" json:"delReason,omitempty" gorm:"type:int2;default:0" annotation:"举报原因"`
}

func (x *ReportReq) Reset() {
	*x = ReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportReq) ProtoMessage() {}

func (x *ReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportReq.ProtoReflect.Descriptor instead.
func (*ReportReq) Descriptor() ([]byte, []int) {
	return file_content_action_service_proto_rawDescGZIP(), []int{5}
}

func (x *ReportReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReportReq) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *ReportReq) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *ReportReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReportReq) GetDelReason() DelReason {
	if x != nil {
		return x.DelReason
	}
	return DelReasonPlaceholder
}

var File_content_action_service_proto protoreflect.FileDescriptor

var file_content_action_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b,
	0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xaa, 0x02, 0x0a, 0x07, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c, 0xa2, 0x01, 0x19,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1c,
	0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65,
	0x66, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c, 0xa2, 0x01,
	0x19, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x8a, 0xa8,
	0xe4, 0xbd, 0x9c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22,
	0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe3, 0x05,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x31, 0xd2, 0xb5, 0x03, 0x2d, 0xa2, 0x01, 0x2a, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5,
	0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1a,
	0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x92, 0x41,
	0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5,
	0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x22, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x1c, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0x69,
	0x64, 0x22, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x72,
	0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xd2, 0xb5, 0x03,
	0x1b, 0xa2, 0x01, 0x18, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0xe6, 0xa0, 0xb9, 0x69, 0x64, 0x22, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8e, 0xa5,
	0xe6, 0x94, 0xb6, 0xe4, 0xba, 0xba, 0x69, 0x64, 0x22, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49,
	0x64, 0x12, 0x70, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x54, 0xd2, 0xb5, 0x03, 0x4b, 0xa2, 0x01, 0x48, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88,
	0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9,
	0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80,
	0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae,
	0xe9, 0xa1, 0xb6, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c,
	0xa2, 0x01, 0x19, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x1c, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52,
	0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xaf, 0x84, 0xe8, 0xae,
	0xba, 0xe6, 0xa0, 0xb9, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x22, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22,
	0xa6, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x78, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x4e, 0xd2, 0xb5, 0x03, 0x4a, 0xa2,
	0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5,
	0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x64, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4e,
	0xd2, 0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05,
	0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x69, 0x64, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x66, 0x0a, 0x06, 0x66, 0x61, 0x76, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x4e, 0xd2, 0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22,
	0x52, 0x06, 0x66, 0x61, 0x76, 0x49, 0x64, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x09, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x78, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x4e, 0xd2, 0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75,
	0x6c, 0x6c, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4e, 0xd2, 0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74,
	0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8,
	0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0xd2,
	0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42,
	0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4,
	0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x22, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0xbb, 0x05, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x04, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x6b,
	0x65, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12,
	0x58, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0c, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x2a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06,
	0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x5d, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76,
	0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x6d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31,
	0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x5e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31,
	0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x5a, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x16, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30,
	0xc8, 0x3e, 0x01, 0x12, 0x57, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x92, 0x41,
	0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x1a, 0x17, 0x92, 0x41,
	0x14, 0x12, 0x12, 0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe6,
	0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x42, 0x47, 0x0a, 0x1a, 0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x69, 0x6f, 0x76, 0x2f, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_action_service_proto_rawDescOnce sync.Once
	file_content_action_service_proto_rawDescData = file_content_action_service_proto_rawDesc
)

func file_content_action_service_proto_rawDescGZIP() []byte {
	file_content_action_service_proto_rawDescOnce.Do(func() {
		file_content_action_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_action_service_proto_rawDescData)
	})
	return file_content_action_service_proto_rawDescData
}

var file_content_action_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_content_action_service_proto_goTypes = []interface{}{
	(*LikeReq)(nil),           // 0: content.LikeReq
	(*CommentReq)(nil),        // 1: content.CommentReq
	(*CommentListReq)(nil),    // 2: content.CommentListReq
	(*CommentListRep)(nil),    // 3: content.CommentListRep
	(*CollectReq)(nil),        // 4: content.CollectReq
	(*ReportReq)(nil),         // 5: content.ReportReq
	(ContentType)(0),          // 6: content.ContentType
	(ActionType)(0),           // 7: content.ActionType
	(*user.UserBaseInfo)(nil), // 8: user.UserBaseInfo
	(*Comment)(nil),           // 9: content.Comment
	(DelReason)(0),            // 10: content.DelReason
	(*request.Object)(nil),    // 11: request.Object
	(*empty.Empty)(nil),       // 12: empty.Empty
}
var file_content_action_service_proto_depIdxs = []int32{
	6,  // 0: content.LikeReq.type:type_name -> content.ContentType
	7,  // 1: content.LikeReq.action:type_name -> content.ActionType
	6,  // 2: content.CommentReq.type:type_name -> content.ContentType
	8,  // 3: content.CommentReq.user:type_name -> user.UserBaseInfo
	6,  // 4: content.CommentListReq.type:type_name -> content.ContentType
	9,  // 5: content.CommentListRep.list:type_name -> content.Comment
	8,  // 6: content.CommentListRep.users:type_name -> user.UserBaseInfo
	6,  // 7: content.CollectReq.type:type_name -> content.ContentType
	6,  // 8: content.ReportReq.type:type_name -> content.ContentType
	10, // 9: content.ReportReq.delReason:type_name -> content.DelReason
	0,  // 10: content.ActionService.Like:input_type -> content.LikeReq
	11, // 11: content.ActionService.DelLike:input_type -> request.Object
	1,  // 12: content.ActionService.Comment:input_type -> content.CommentReq
	2,  // 13: content.ActionService.CommentList:input_type -> content.CommentListReq
	11, // 14: content.ActionService.DelComment:input_type -> request.Object
	4,  // 15: content.ActionService.Collect:input_type -> content.CollectReq
	5,  // 16: content.ActionService.Report:input_type -> content.ReportReq
	11, // 17: content.ActionService.Like:output_type -> request.Object
	12, // 18: content.ActionService.DelLike:output_type -> empty.Empty
	11, // 19: content.ActionService.Comment:output_type -> request.Object
	3,  // 20: content.ActionService.CommentList:output_type -> content.CommentListRep
	12, // 21: content.ActionService.DelComment:output_type -> empty.Empty
	12, // 22: content.ActionService.Collect:output_type -> empty.Empty
	12, // 23: content.ActionService.Report:output_type -> empty.Empty
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_content_action_service_proto_init() }
func file_content_action_service_proto_init() {
	if File_content_action_service_proto != nil {
		return
	}
	file_content_content_enum_proto_init()
	file_content_action_enum_proto_init()
	file_content_content_model_proto_init()
	file_content_action_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_content_action_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_action_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_action_service_proto_goTypes,
		DependencyIndexes: file_content_action_service_proto_depIdxs,
		MessageInfos:      file_content_action_service_proto_msgTypes,
	}.Build()
	File_content_action_service_proto = out.File
	file_content_action_service_proto_rawDesc = nil
	file_content_action_service_proto_goTypes = nil
	file_content_action_service_proto_depIdxs = nil
}
