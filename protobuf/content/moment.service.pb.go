// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: content/moment.service.proto

package content

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/liov/tiga/protobuf/common"
	user "github.com/liov/tiga/protobuf/user"
	area "github.com/liov/tiga/protobuf/utils/area"
	empty "github.com/liov/tiga/protobuf/utils/empty"
	_ "github.com/liov/tiga/protobuf/utils/oauth"
	_ "github.com/liov/tiga/protobuf/utils/proto/gogo"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	request "github.com/liov/tiga/protobuf/utils/request"
	_ "github.com/liov/tiga/protobuf/utils/response"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 新增瞬间
type AddMomentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Content        string         `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" annotation:"内容"`
	BookId         uint64         `protobuf:"varint,4,opt,name=bookId,proto3" json:"bookId,omitempty" annotation:"日记本Id"`
	Type           MomentType     `protobuf:"varint,3,opt,name=type,proto3,enum=content.MomentType" json:"type,omitempty" annotation:"瞬间类型"`
	Mood           string         `protobuf:"bytes,5,opt,name=mood,proto3" json:"mood,omitempty" gorm:"-" annotation:"心情"`
	Weather        string         `protobuf:"bytes,7,opt,name=weather,proto3" json:"weather,omitempty" gorm:"-" annotation:"心情"`
	AreaId         uint64         `protobuf:"varint,10,opt,name=areaId,proto3" json:"areaId,omitempty" annotation:"地区"`
	AreaVisibility uint32         `protobuf:"varint,11,opt,name=areaVisibility,proto3" json:"areaVisibility,omitempty" annotation:"地区可见性，1-可见"`
	Location       string         `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty" annotation:"位置"`
	Tags           []string       `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" gorm:"-" annotation:"标签"`
	Images         string         `protobuf:"bytes,14,opt,name=images,proto3" json:"images,omitempty" annotation:"图片"`
	UserId         uint64         `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	Sequence       uint32         `protobuf:"varint,19,opt,name=sequence,proto3" json:"sequence,omitempty" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous      uint32         `protobuf:"varint,20,opt,name=anonymous,proto3" json:"anonymous,omitempty" annotation:"是否匿名,0-是,1否"`
	Permission     ViewPermission `protobuf:"varint,21,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" annotation:"查看权限"`
}

func (x *AddMomentReq) Reset() {
	*x = AddMomentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_moment_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMomentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMomentReq) ProtoMessage() {}

func (x *AddMomentReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_moment_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMomentReq.ProtoReflect.Descriptor instead.
func (*AddMomentReq) Descriptor() ([]byte, []int) {
	return file_content_moment_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddMomentReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddMomentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddMomentReq) GetBookId() uint64 {
	if x != nil {
		return x.BookId
	}
	return 0
}

func (x *AddMomentReq) GetType() MomentType {
	if x != nil {
		return x.Type
	}
	return MomentTypePlaceholder
}

func (x *AddMomentReq) GetMood() string {
	if x != nil {
		return x.Mood
	}
	return ""
}

func (x *AddMomentReq) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

func (x *AddMomentReq) GetAreaId() uint64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *AddMomentReq) GetAreaVisibility() uint32 {
	if x != nil {
		return x.AreaVisibility
	}
	return 0
}

func (x *AddMomentReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AddMomentReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddMomentReq) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *AddMomentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddMomentReq) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AddMomentReq) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *AddMomentReq) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

type MomentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo   uint32 `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *MomentListReq) Reset() {
	*x = MomentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_moment_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentListReq) ProtoMessage() {}

func (x *MomentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_moment_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentListReq.ProtoReflect.Descriptor instead.
func (*MomentListReq) Descriptor() ([]byte, []int) {
	return file_content_moment_service_proto_rawDescGZIP(), []int{1}
}

func (x *MomentListReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *MomentListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MomentListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Moment            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Users []*user.UserBaseInfo `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *MomentListRep) Reset() {
	*x = MomentListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_moment_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentListRep) ProtoMessage() {}

func (x *MomentListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_moment_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentListRep.ProtoReflect.Descriptor instead.
func (*MomentListRep) Descriptor() ([]byte, []int) {
	return file_content_moment_service_proto_rawDescGZIP(), []int{2}
}

func (x *MomentListRep) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MomentListRep) GetList() []*Moment {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MomentListRep) GetUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

// 瞬间
type MomentRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" gorm:"type:text;not null" annotation:"内容"`
	Images  string `protobuf:"bytes,32,opt,name=images,proto3" json:"images,omitempty" gorm:"type:text;default:''" annotation:"图片"`
	// 还是决定瞬间和日记形态合为一种
	BookId uint64     `protobuf:"varint,4,opt,name=bookId,proto3" json:"bookId,omitempty" gorm:"size:20;default:0" annotation:"日记本Id"`
	Book   *DiaryBook `protobuf:"bytes,26,opt,name=book,proto3" json:"book,omitempty" gorm:"-" annotation:"日记本"`
	// 单个视频或音频或多个图片
	Type           MomentType           `protobuf:"varint,3,opt,name=type,proto3,enum=content.MomentType" json:"type,omitempty" gorm:"type:int2;default:0" annotation:"瞬间类型"`
	Mood           *TinyTag             `protobuf:"bytes,5,opt,name=mood,proto3" json:"mood,omitempty" gorm:"-" annotation:"心情"`
	Weather        *TinyTag             `protobuf:"bytes,7,opt,name=weather,proto3" json:"weather,omitempty" gorm:"-" annotation:"天气"`
	Area           *area.Area           `protobuf:"bytes,9,opt,name=area,proto3" json:"area,omitempty" gorm:"-" annotation:"地区"`
	AreaId         uint64               `protobuf:"varint,10,opt,name=areaId,proto3" json:"areaId,omitempty" gorm:"size:10;default:0" annotation:"地区"`
	AreaVisibility uint32               `protobuf:"varint,11,opt,name=areaVisibility,proto3" json:"areaVisibility,omitempty" gorm:"type:int2;default:2" annotation:"地区可见性，1-可见"`
	Location       string               `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty" gorm:"size:20;default:''" annotation:"位置"`
	Tags           []*TinyTag           `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" gorm:"-" annotation:"标签"`
	User           *user.UserBaseInfo   `protobuf:"bytes,14,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	UserId         uint64               `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" annotation:"用户id"`
	ApproveUsers   []uint64             `protobuf:"varint,15,rep,packed,name=approveUsers,proto3" json:"approveUsers,omitempty" gorm:"-" annotation:"点赞用户"`
	CollectUsers   []uint64             `protobuf:"varint,16,rep,packed,name=collectUsers,proto3" json:"collectUsers,omitempty" gorm:"-" annotation:"收藏用户"`
	LikeUsers      []uint64             `protobuf:"varint,25,rep,packed,name=likeUsers,proto3" json:"likeUsers,omitempty" gorm:"-" annotation:"喜欢用户"`
	Comments       []*Comment           `protobuf:"bytes,18,rep,name=comments,proto3" json:"comments,omitempty" gorm:"-" annotation:"评论"`
	Users          []*user.UserBaseInfo `protobuf:"bytes,31,rep,name=users,proto3" json:"users,omitempty" gorm:"-" annotation:"评论"`
	Ext            *ContentExt          `protobuf:"bytes,30,opt,name=ext,proto3" json:"ext,omitempty" gorm:"-" annotation:"统计数据"`
	LikeId         uint64               `protobuf:"varint,27,opt,name=likeId,proto3" json:"likeId,omitempty" gorm:"-" annotation:"喜欢id,为0代表用户没有点喜欢"`
	UnlikeId       uint64               `protobuf:"varint,29,opt,name=unlikeId,proto3" json:"unlikeId,omitempty" gorm:"-" annotation:"不喜欢id,为0代表用户没有点喜欢"`
	Collect        bool                 `protobuf:"varint,28,opt,name=collect,proto3" json:"collect,omitempty" gorm:"-" annotation:"是否收藏"`
	Sequence       uint32               `protobuf:"varint,19,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous      uint32               `protobuf:"varint,20,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
	Permission     ViewPermission       `protobuf:"varint,21,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" gorm:"type:int2;default:0" annotation:"查看权限"`
	CreatedAt      string               `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt      string               `protobuf:"bytes,23,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status         uint32               `protobuf:"varint,24,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *MomentRep) Reset() {
	*x = MomentRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_moment_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentRep) ProtoMessage() {}

func (x *MomentRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_moment_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentRep.ProtoReflect.Descriptor instead.
func (*MomentRep) Descriptor() ([]byte, []int) {
	return file_content_moment_service_proto_rawDescGZIP(), []int{3}
}

func (x *MomentRep) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MomentRep) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MomentRep) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *MomentRep) GetBookId() uint64 {
	if x != nil {
		return x.BookId
	}
	return 0
}

func (x *MomentRep) GetBook() *DiaryBook {
	if x != nil {
		return x.Book
	}
	return nil
}

func (x *MomentRep) GetType() MomentType {
	if x != nil {
		return x.Type
	}
	return MomentTypePlaceholder
}

func (x *MomentRep) GetMood() *TinyTag {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *MomentRep) GetWeather() *TinyTag {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *MomentRep) GetArea() *area.Area {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *MomentRep) GetAreaId() uint64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *MomentRep) GetAreaVisibility() uint32 {
	if x != nil {
		return x.AreaVisibility
	}
	return 0
}

func (x *MomentRep) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *MomentRep) GetTags() []*TinyTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MomentRep) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MomentRep) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MomentRep) GetApproveUsers() []uint64 {
	if x != nil {
		return x.ApproveUsers
	}
	return nil
}

func (x *MomentRep) GetCollectUsers() []uint64 {
	if x != nil {
		return x.CollectUsers
	}
	return nil
}

func (x *MomentRep) GetLikeUsers() []uint64 {
	if x != nil {
		return x.LikeUsers
	}
	return nil
}

func (x *MomentRep) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *MomentRep) GetUsers() []*user.UserBaseInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MomentRep) GetExt() *ContentExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *MomentRep) GetLikeId() uint64 {
	if x != nil {
		return x.LikeId
	}
	return 0
}

func (x *MomentRep) GetUnlikeId() uint64 {
	if x != nil {
		return x.UnlikeId
	}
	return 0
}

func (x *MomentRep) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *MomentRep) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *MomentRep) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *MomentRep) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

func (x *MomentRep) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MomentRep) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *MomentRep) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_content_moment_service_proto protoreflect.FileDescriptor

var file_content_moment_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b,
	0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x07, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xd2, 0xb5, 0x03, 0x1b, 0xa2, 0x01,
	0x18, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97, 0xa5,
	0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x49, 0x64, 0x22, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c, 0xa2, 0x01, 0x19, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9e, 0xac, 0xe9, 0x97, 0xb4, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f,
	0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0x22, 0x52,
	0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0x22, 0x52, 0x07, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x22,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2e, 0xd2, 0xb5, 0x03, 0x2a, 0xa2, 0x01, 0x27, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7,
	0x81, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0x31, 0x2d, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0x22,
	0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x22, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x69, 0x64, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x6b, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4f, 0xd2, 0xb5, 0x03, 0x4b, 0xa2, 0x01, 0x48, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab,
	0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc,
	0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9,
	0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2b, 0xd2, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90,
	0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c, 0xa2, 0x01, 0x19, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0d, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x74, 0x0a, 0x0d, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xfe,
	0x13, 0x0a, 0x09, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01,
	0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b,
	0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xd2, 0xb5, 0x03, 0x32, 0xa2, 0x01, 0x2f, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x22, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x38, 0xd2, 0xb5, 0x03, 0x34, 0xa2, 0x01, 0x31, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97, 0xa5, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x49, 0x64, 0x22,
	0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x22,
	0xa2, 0x01, 0x1f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97, 0xa5, 0xe8, 0xae, 0xb0, 0xe6, 0x9c,
	0xac, 0x22, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3b, 0xd2, 0xb5, 0x03,
	0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69,
	0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9e, 0xac, 0xe9, 0x97,
	0xb4, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49,
	0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42, 0x23,
	0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xbf, 0x83, 0xe6,
	0x83, 0x85, 0x22, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x67, 0x42, 0x23, 0xd2, 0xb5,
	0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xa4, 0xa9, 0xe6, 0xb0, 0x94,
	0x22, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x72, 0x65, 0x61, 0x2e,
	0x41, 0x72, 0x65, 0x61, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0x22, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12,
	0x4b, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69,
	0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0,
	0xe5, 0x8c, 0xba, 0x22, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x0e,
	0x61, 0x72, 0x65, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x49, 0xd2, 0xb5, 0x03, 0x45, 0xa2, 0x01, 0x42, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x32, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81,
	0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0x31, 0x2d, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0x22, 0x52,
	0x0e, 0x61, 0x72, 0x65, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0x22, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61,
	0x67, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6,
	0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23,
	0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3a, 0xd2, 0xb5, 0x03, 0x36, 0xa2,
	0x01, 0x33, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b,
	0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x9e, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x04, 0x42, 0x29,
	0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x96, 0x9c, 0xe6,
	0xac, 0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01,
	0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0x22, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f,
	0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0x22, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01,
	0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x22, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x6c, 0x69, 0x6b, 0x65,
	0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x45, 0xd2, 0xb5, 0x03, 0x41, 0xa2, 0x01,
	0x3e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x69, 0x64, 0x2c, 0xe4,
	0xb8, 0xba, 0x30, 0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6,
	0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0x82, 0xb9, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x22, 0x52,
	0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x6b,
	0x65, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x48, 0xd2, 0xb5, 0x03, 0x44, 0xa2,
	0x01, 0x41, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xb8, 0x8d, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2,
	0x69, 0x64, 0x2c, 0xe4, 0xb8, 0xba, 0x30, 0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0x82, 0xb9, 0xe5, 0x96, 0x9c, 0xe6,
	0xac, 0xa2, 0x22, 0x52, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29,
	0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a,
	0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d,
	0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6,
	0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46,
	0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf,
	0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x3b,
	0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f,
	0xa5, 0xe7, 0x9c, 0x8b, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31,
	0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36,
	0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30,
	0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0xe2, 0x03, 0x0a, 0x0d, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x53, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e,
	0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x56, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x15, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x59,
	0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06,
	0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x5c, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31,
	0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x52, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08,
	0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x1a, 0x17, 0x92, 0x41, 0x14,
	0x12, 0x12, 0xe7, 0x9e, 0xac, 0xe9, 0x97, 0xb4, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8f, 0xa3, 0x42, 0x47, 0x0a, 0x1a, 0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x69, 0x6f, 0x76, 0x2f, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_moment_service_proto_rawDescOnce sync.Once
	file_content_moment_service_proto_rawDescData = file_content_moment_service_proto_rawDesc
)

func file_content_moment_service_proto_rawDescGZIP() []byte {
	file_content_moment_service_proto_rawDescOnce.Do(func() {
		file_content_moment_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_moment_service_proto_rawDescData)
	})
	return file_content_moment_service_proto_rawDescData
}

var file_content_moment_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_content_moment_service_proto_goTypes = []interface{}{
	(*AddMomentReq)(nil),      // 0: content.AddMomentReq
	(*MomentListReq)(nil),     // 1: content.MomentListReq
	(*MomentListRep)(nil),     // 2: content.MomentListRep
	(*MomentRep)(nil),         // 3: content.MomentRep
	(MomentType)(0),           // 4: content.MomentType
	(ViewPermission)(0),       // 5: content.ViewPermission
	(*Moment)(nil),            // 6: content.Moment
	(*user.UserBaseInfo)(nil), // 7: user.UserBaseInfo
	(*DiaryBook)(nil),         // 8: content.DiaryBook
	(*TinyTag)(nil),           // 9: content.TinyTag
	(*area.Area)(nil),         // 10: area.Area
	(*Comment)(nil),           // 11: content.Comment
	(*ContentExt)(nil),        // 12: content.ContentExt
	(*request.Object)(nil),    // 13: request.Object
	(*empty.Empty)(nil),       // 14: empty.Empty
}
var file_content_moment_service_proto_depIdxs = []int32{
	4,  // 0: content.AddMomentReq.type:type_name -> content.MomentType
	5,  // 1: content.AddMomentReq.permission:type_name -> content.ViewPermission
	6,  // 2: content.MomentListRep.list:type_name -> content.Moment
	7,  // 3: content.MomentListRep.users:type_name -> user.UserBaseInfo
	8,  // 4: content.MomentRep.book:type_name -> content.DiaryBook
	4,  // 5: content.MomentRep.type:type_name -> content.MomentType
	9,  // 6: content.MomentRep.mood:type_name -> content.TinyTag
	9,  // 7: content.MomentRep.weather:type_name -> content.TinyTag
	10, // 8: content.MomentRep.area:type_name -> area.Area
	9,  // 9: content.MomentRep.tags:type_name -> content.TinyTag
	7,  // 10: content.MomentRep.user:type_name -> user.UserBaseInfo
	11, // 11: content.MomentRep.comments:type_name -> content.Comment
	7,  // 12: content.MomentRep.users:type_name -> user.UserBaseInfo
	12, // 13: content.MomentRep.ext:type_name -> content.ContentExt
	5,  // 14: content.MomentRep.permission:type_name -> content.ViewPermission
	13, // 15: content.MomentService.Info:input_type -> request.Object
	0,  // 16: content.MomentService.Add:input_type -> content.AddMomentReq
	0,  // 17: content.MomentService.Edit:input_type -> content.AddMomentReq
	1,  // 18: content.MomentService.List:input_type -> content.MomentListReq
	13, // 19: content.MomentService.Delete:input_type -> request.Object
	6,  // 20: content.MomentService.Info:output_type -> content.Moment
	13, // 21: content.MomentService.Add:output_type -> request.Object
	14, // 22: content.MomentService.Edit:output_type -> empty.Empty
	2,  // 23: content.MomentService.List:output_type -> content.MomentListRep
	14, // 24: content.MomentService.Delete:output_type -> empty.Empty
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_content_moment_service_proto_init() }
func file_content_moment_service_proto_init() {
	if File_content_moment_service_proto != nil {
		return
	}
	file_content_content_enum_proto_init()
	file_content_content_model_proto_init()
	file_content_action_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_content_moment_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMomentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_moment_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_moment_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_moment_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_moment_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_moment_service_proto_goTypes,
		DependencyIndexes: file_content_moment_service_proto_depIdxs,
		MessageInfos:      file_content_moment_service_proto_msgTypes,
	}.Build()
	File_content_moment_service_proto = out.File
	file_content_moment_service_proto_rawDesc = nil
	file_content_moment_service_proto_goTypes = nil
	file_content_moment_service_proto_depIdxs = nil
}
