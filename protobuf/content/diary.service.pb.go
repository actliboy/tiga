// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: content/diary.service.proto

package content

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/liov/tiga/protobuf/common"
	empty "github.com/liov/tiga/protobuf/utils/empty"
	_ "github.com/liov/tiga/protobuf/utils/oauth"
	_ "github.com/liov/tiga/protobuf/utils/proto/gogo"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	request "github.com/liov/tiga/protobuf/utils/request"
	_ "github.com/liov/tiga/protobuf/utils/response"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DiaryBookListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiaryBookListReq) Reset() {
	*x = DiaryBookListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiaryBookListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiaryBookListReq) ProtoMessage() {}

func (x *DiaryBookListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiaryBookListReq.ProtoReflect.Descriptor instead.
func (*DiaryBookListReq) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{0}
}

type DiaryBookListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	List  []*DiaryBook `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DiaryBookListRep) Reset() {
	*x = DiaryBookListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiaryBookListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiaryBookListRep) ProtoMessage() {}

func (x *DiaryBookListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiaryBookListRep.ProtoReflect.Descriptor instead.
func (*DiaryBookListRep) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{1}
}

func (x *DiaryBookListRep) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DiaryBookListRep) GetList() []*DiaryBook {
	if x != nil {
		return x.List
	}
	return nil
}

type DiaryBookReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	PageNo   uint32 `protobuf:"varint,2,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DiaryBookReq) Reset() {
	*x = DiaryBookReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiaryBookReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiaryBookReq) ProtoMessage() {}

func (x *DiaryBookReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiaryBookReq.ProtoReflect.Descriptor instead.
func (*DiaryBookReq) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{2}
}

func (x *DiaryBookReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DiaryBookReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *DiaryBookReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DiaryBookRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book *DiaryBook `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	List []*Diary   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DiaryBookRep) Reset() {
	*x = DiaryBookRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiaryBookRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiaryBookRep) ProtoMessage() {}

func (x *DiaryBookRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiaryBookRep.ProtoReflect.Descriptor instead.
func (*DiaryBookRep) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{3}
}

func (x *DiaryBookRep) GetBook() *DiaryBook {
	if x != nil {
		return x.Book
	}
	return nil
}

func (x *DiaryBookRep) GetList() []*Diary {
	if x != nil {
		return x.List
	}
	return nil
}

type AddDiaryBookReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	UserId      uint64 `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" gorm:"size:10;not null" annotation:"标题"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" gorm:"type:text;not null" annotation:"描述"`
	Cover       string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty" gorm:"size:255;not null" annotation:"封面"`
	Sequence    uint32 `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous   uint32 `protobuf:"varint,15,opt,name=anonymous,proto3" json:"anonymous,omitempty" gorm:"type:int2;default:0" annotation:"是否匿名,0-是,1否"`
}

func (x *AddDiaryBookReq) Reset() {
	*x = AddDiaryBookReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDiaryBookReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDiaryBookReq) ProtoMessage() {}

func (x *AddDiaryBookReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDiaryBookReq.ProtoReflect.Descriptor instead.
func (*AddDiaryBookReq) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{4}
}

func (x *AddDiaryBookReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddDiaryBookReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddDiaryBookReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddDiaryBookReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddDiaryBookReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *AddDiaryBookReq) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AddDiaryBookReq) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

type AddDiaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" validate:"required"`
	Content        string         `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty" annotation:"内容"`
	BookId         uint64         `protobuf:"varint,4,opt,name=bookId,proto3" json:"bookId,omitempty" annotation:"日记本Id"`
	Mood           string         `protobuf:"bytes,5,opt,name=mood,proto3" json:"mood,omitempty" gorm:"-" annotation:"心情"`
	Weather        string         `protobuf:"bytes,7,opt,name=weather,proto3" json:"weather,omitempty" gorm:"-" annotation:"心情"`
	AreaId         uint64         `protobuf:"varint,10,opt,name=areaId,proto3" json:"areaId,omitempty" annotation:"地区"`
	AreaVisibility uint32         `protobuf:"varint,11,opt,name=areaVisibility,proto3" json:"areaVisibility,omitempty" annotation:"地区可见性，1-可见"`
	Location       string         `protobuf:"bytes,12,opt,name=location,proto3" json:"location,omitempty" annotation:"位置"`
	Tags           []string       `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" gorm:"-" annotation:"标签"`
	UserId         uint64         `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" annotation:"用户id"`
	Sequence       uint32         `protobuf:"varint,19,opt,name=sequence,proto3" json:"sequence,omitempty" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	Anonymous      uint32         `protobuf:"varint,20,opt,name=anonymous,proto3" json:"anonymous,omitempty" annotation:"是否匿名,0-是,1否"`
	Permission     ViewPermission `protobuf:"varint,21,opt,name=permission,proto3,enum=content.ViewPermission" json:"permission,omitempty" annotation:"查看权限"`
}

func (x *AddDiaryReq) Reset() {
	*x = AddDiaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDiaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDiaryReq) ProtoMessage() {}

func (x *AddDiaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDiaryReq.ProtoReflect.Descriptor instead.
func (*AddDiaryReq) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{5}
}

func (x *AddDiaryReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddDiaryReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddDiaryReq) GetBookId() uint64 {
	if x != nil {
		return x.BookId
	}
	return 0
}

func (x *AddDiaryReq) GetMood() string {
	if x != nil {
		return x.Mood
	}
	return ""
}

func (x *AddDiaryReq) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

func (x *AddDiaryReq) GetAreaId() uint64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *AddDiaryReq) GetAreaVisibility() uint32 {
	if x != nil {
		return x.AreaVisibility
	}
	return 0
}

func (x *AddDiaryReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AddDiaryReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddDiaryReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddDiaryReq) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AddDiaryReq) GetAnonymous() uint32 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

func (x *AddDiaryReq) GetPermission() ViewPermission {
	if x != nil {
		return x.Permission
	}
	return ViewPermissionPlaceholder
}

type DiaryListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo   uint32 `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize uint32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DiaryListReq) Reset() {
	*x = DiaryListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiaryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiaryListReq) ProtoMessage() {}

func (x *DiaryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiaryListReq.ProtoReflect.Descriptor instead.
func (*DiaryListReq) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{6}
}

func (x *DiaryListReq) GetPageNo() uint32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *DiaryListReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DiaryListRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Diary `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DiaryListRep) Reset() {
	*x = DiaryListRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_diary_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiaryListRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiaryListRep) ProtoMessage() {}

func (x *DiaryListRep) ProtoReflect() protoreflect.Message {
	mi := &file_content_diary_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiaryListRep.ProtoReflect.Descriptor instead.
func (*DiaryListRep) Descriptor() ([]byte, []int) {
	return file_content_diary_service_proto_rawDescGZIP(), []int{7}
}

func (x *DiaryListRep) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiaryListRep) GetList() []*Diary {
	if x != nil {
		return x.List
	}
	return nil
}

var File_content_diary_service_proto protoreflect.FileDescriptor

var file_content_diary_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x72, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10,
	0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x22, 0x50, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a,
	0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x5a, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd4,
	0x04, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a,
	0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21,
	0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x92, 0x41, 0x02, 0x40,
	0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xd2, 0xb5, 0x03, 0x2e, 0xa2, 0x01,
	0x2b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x30, 0x3b, 0x6e,
	0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0x22, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xd2, 0xb5, 0x03, 0x30, 0xa2, 0x01,
	0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x65, 0x78, 0x74,
	0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x22, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x05, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f,
	0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35,
	0x35, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xb0, 0x81, 0xe9, 0x9d, 0xa2, 0x22, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2,
	0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74,
	0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5,
	0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0,
	0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5,
	0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd,
	0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x64, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x46, 0xd2, 0xb5, 0x03, 0x42, 0xa2, 0x01, 0x3f, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d, 0x2c, 0x30,
	0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0xeb, 0x06, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x44, 0x69, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xd2, 0xb5, 0x03, 0x1b, 0xa2, 0x01, 0x18,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x97, 0xa5, 0xe8,
	0xae, 0xb0, 0xe6, 0x9c, 0xac, 0x49, 0x64, 0x22, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xbf, 0x83, 0xe6,
	0x83, 0x85, 0x22, 0x52, 0x04, 0x6d, 0x6f, 0x6f, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f,
	0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0x22, 0x52,
	0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01,
	0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0,
	0xe5, 0x8c, 0xba, 0x22, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0e,
	0x61, 0x72, 0x65, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0xd2, 0xb5, 0x03, 0x2a, 0xa2, 0x01, 0x27, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9c, 0xb0, 0xe5, 0x8c, 0xba, 0xe5,
	0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0xe6, 0x80, 0xa7, 0xef, 0xbc, 0x8c, 0x31, 0x2d, 0xe5, 0x8f, 0xaf,
	0xe8, 0xa7, 0x81, 0x22, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xd2, 0xb5, 0x03, 0x16, 0xa2, 0x01, 0x13, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd,
	0xae, 0x22, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f,
	0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x22, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0xd2, 0xb5, 0x03, 0x18, 0xa2, 0x01, 0x15, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x69, 0x64, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x6b, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x4f, 0xd2, 0xb5, 0x03, 0x4b, 0xa2, 0x01, 0x48, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab,
	0xe7, 0x9a, 0x84, 0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6,
	0x8d, 0xae, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc,
	0xe6, 0x9d, 0xa5, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9,
	0xa1, 0xb6, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2b, 0xd2, 0xb5, 0x03, 0x27, 0xa2, 0x01, 0x24, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8c, 0xbf, 0xe5, 0x90,
	0x8d, 0x2c, 0x30, 0x2d, 0xe6, 0x98, 0xaf, 0x2c, 0x31, 0xe5, 0x90, 0xa6, 0x22, 0x52, 0x09, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0xd2, 0xb5, 0x03, 0x1c, 0xa2, 0x01, 0x19, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c, 0x8b,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0x22, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x48, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x32, 0xfb, 0x06, 0x0a, 0x0c, 0x44, 0x69, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x67, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x70, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08,
	0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x44,
	0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x92, 0x41, 0x08,
	0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x62, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f,
	0x6b, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12,
	0x65, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x44, 0x69, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69,
	0x61, 0x72, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x1a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x72, 0x79, 0x42,
	0x6f, 0x6f, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e,
	0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x51, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a,
	0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x69, 0x61, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06,
	0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x00, 0x12, 0x54, 0x0a, 0x03, 0x41, 0x64, 0x64,
	0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22,
	0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x72, 0x79, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12,
	0x57, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61,
	0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76,
	0x31, 0x2e, 0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x12, 0x59, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30,
	0xc8, 0x3e, 0x00, 0x12, 0x51, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0c,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x61, 0x72, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x76, 0x31, 0x2e,
	0x30, 0x2e, 0x30, 0xc8, 0x3e, 0x01, 0x1a, 0x17, 0x92, 0x41, 0x14, 0x12, 0x12, 0xe6, 0x97, 0xa5,
	0xe8, 0xae, 0xb0, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0x42,
	0x47, 0x0a, 0x1a, 0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6f, 0x76, 0x2f, 0x68,
	0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_diary_service_proto_rawDescOnce sync.Once
	file_content_diary_service_proto_rawDescData = file_content_diary_service_proto_rawDesc
)

func file_content_diary_service_proto_rawDescGZIP() []byte {
	file_content_diary_service_proto_rawDescOnce.Do(func() {
		file_content_diary_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_diary_service_proto_rawDescData)
	})
	return file_content_diary_service_proto_rawDescData
}

var file_content_diary_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_content_diary_service_proto_goTypes = []interface{}{
	(*DiaryBookListReq)(nil), // 0: content.DiaryBookListReq
	(*DiaryBookListRep)(nil), // 1: content.DiaryBookListRep
	(*DiaryBookReq)(nil),     // 2: content.DiaryBookReq
	(*DiaryBookRep)(nil),     // 3: content.DiaryBookRep
	(*AddDiaryBookReq)(nil),  // 4: content.AddDiaryBookReq
	(*AddDiaryReq)(nil),      // 5: content.AddDiaryReq
	(*DiaryListReq)(nil),     // 6: content.DiaryListReq
	(*DiaryListRep)(nil),     // 7: content.DiaryListRep
	(*DiaryBook)(nil),        // 8: content.DiaryBook
	(*Diary)(nil),            // 9: content.Diary
	(ViewPermission)(0),      // 10: content.ViewPermission
	(*request.Object)(nil),   // 11: request.Object
	(*empty.Empty)(nil),      // 12: empty.Empty
}
var file_content_diary_service_proto_depIdxs = []int32{
	8,  // 0: content.DiaryBookListRep.list:type_name -> content.DiaryBook
	8,  // 1: content.DiaryBookRep.book:type_name -> content.DiaryBook
	9,  // 2: content.DiaryBookRep.list:type_name -> content.Diary
	10, // 3: content.AddDiaryReq.permission:type_name -> content.ViewPermission
	9,  // 4: content.DiaryListRep.list:type_name -> content.Diary
	2,  // 5: content.DiaryService.DiaryBook:input_type -> content.DiaryBookReq
	0,  // 6: content.DiaryService.DiaryBookList:input_type -> content.DiaryBookListReq
	4,  // 7: content.DiaryService.AddDiaryBook:input_type -> content.AddDiaryBookReq
	4,  // 8: content.DiaryService.EditDiaryBook:input_type -> content.AddDiaryBookReq
	11, // 9: content.DiaryService.Info:input_type -> request.Object
	5,  // 10: content.DiaryService.Add:input_type -> content.AddDiaryReq
	5,  // 11: content.DiaryService.Edit:input_type -> content.AddDiaryReq
	6,  // 12: content.DiaryService.List:input_type -> content.DiaryListReq
	11, // 13: content.DiaryService.Delete:input_type -> request.Object
	3,  // 14: content.DiaryService.DiaryBook:output_type -> content.DiaryBookRep
	1,  // 15: content.DiaryService.DiaryBookList:output_type -> content.DiaryBookListRep
	11, // 16: content.DiaryService.AddDiaryBook:output_type -> request.Object
	12, // 17: content.DiaryService.EditDiaryBook:output_type -> empty.Empty
	9,  // 18: content.DiaryService.Info:output_type -> content.Diary
	11, // 19: content.DiaryService.Add:output_type -> request.Object
	12, // 20: content.DiaryService.Edit:output_type -> empty.Empty
	7,  // 21: content.DiaryService.List:output_type -> content.DiaryListRep
	12, // 22: content.DiaryService.Delete:output_type -> empty.Empty
	14, // [14:23] is the sub-list for method output_type
	5,  // [5:14] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_content_diary_service_proto_init() }
func file_content_diary_service_proto_init() {
	if File_content_diary_service_proto != nil {
		return
	}
	file_content_content_enum_proto_init()
	file_content_content_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_content_diary_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiaryBookListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_diary_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiaryBookListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_diary_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiaryBookReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_diary_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiaryBookRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_diary_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDiaryBookReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_diary_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDiaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_diary_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiaryListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_diary_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiaryListRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_diary_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_diary_service_proto_goTypes,
		DependencyIndexes: file_content_diary_service_proto_depIdxs,
		MessageInfos:      file_content_diary_service_proto_msgTypes,
	}.Build()
	File_content_diary_service_proto = out.File
	file_content_diary_service_proto_rawDesc = nil
	file_content_diary_service_proto_goTypes = nil
	file_content_diary_service_proto_depIdxs = nil
}
