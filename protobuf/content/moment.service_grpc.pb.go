// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package content

import (
	context "context"
	empty "github.com/liov/tiga/protobuf/utils/empty"
	request "github.com/liov/tiga/protobuf/utils/request"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MomentServiceClient is the client API for MomentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MomentServiceClient interface {
	// 详情
	Info(ctx context.Context, in *request.Object, opts ...grpc.CallOption) (*Moment, error)
	// 新建
	Add(ctx context.Context, in *AddMomentReq, opts ...grpc.CallOption) (*request.Object, error)
	// 修改
	Edit(ctx context.Context, in *AddMomentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 修改
	List(ctx context.Context, in *MomentListReq, opts ...grpc.CallOption) (*MomentListRep, error)
	// 删除
	Delete(ctx context.Context, in *request.Object, opts ...grpc.CallOption) (*empty.Empty, error)
}

type momentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMomentServiceClient(cc grpc.ClientConnInterface) MomentServiceClient {
	return &momentServiceClient{cc}
}

func (c *momentServiceClient) Info(ctx context.Context, in *request.Object, opts ...grpc.CallOption) (*Moment, error) {
	out := new(Moment)
	err := c.cc.Invoke(ctx, "/content.MomentService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) Add(ctx context.Context, in *AddMomentReq, opts ...grpc.CallOption) (*request.Object, error) {
	out := new(request.Object)
	err := c.cc.Invoke(ctx, "/content.MomentService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) Edit(ctx context.Context, in *AddMomentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MomentService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) List(ctx context.Context, in *MomentListReq, opts ...grpc.CallOption) (*MomentListRep, error) {
	out := new(MomentListRep)
	err := c.cc.Invoke(ctx, "/content.MomentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentServiceClient) Delete(ctx context.Context, in *request.Object, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/content.MomentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MomentServiceServer is the server API for MomentService service.
// All implementations must embed UnimplementedMomentServiceServer
// for forward compatibility
type MomentServiceServer interface {
	// 详情
	Info(context.Context, *request.Object) (*Moment, error)
	// 新建
	Add(context.Context, *AddMomentReq) (*request.Object, error)
	// 修改
	Edit(context.Context, *AddMomentReq) (*empty.Empty, error)
	// 修改
	List(context.Context, *MomentListReq) (*MomentListRep, error)
	// 删除
	Delete(context.Context, *request.Object) (*empty.Empty, error)
	mustEmbedUnimplementedMomentServiceServer()
}

// UnimplementedMomentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMomentServiceServer struct {
}

func (UnimplementedMomentServiceServer) Info(context.Context, *request.Object) (*Moment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMomentServiceServer) Add(context.Context, *AddMomentReq) (*request.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMomentServiceServer) Edit(context.Context, *AddMomentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedMomentServiceServer) List(context.Context, *MomentListReq) (*MomentListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMomentServiceServer) Delete(context.Context, *request.Object) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMomentServiceServer) mustEmbedUnimplementedMomentServiceServer() {}

// UnsafeMomentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MomentServiceServer will
// result in compilation errors.
type UnsafeMomentServiceServer interface {
	mustEmbedUnimplementedMomentServiceServer()
}

func RegisterMomentServiceServer(s grpc.ServiceRegistrar, srv MomentServiceServer) {
	s.RegisterService(&MomentService_ServiceDesc, srv)
}

func _MomentService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MomentService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).Info(ctx, req.(*request.Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MomentService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).Add(ctx, req.(*AddMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMomentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MomentService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).Edit(ctx, req.(*AddMomentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MomentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MomentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).List(ctx, req.(*MomentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MomentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.MomentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServiceServer).Delete(ctx, req.(*request.Object))
	}
	return interceptor(ctx, in, info, handler)
}

// MomentService_ServiceDesc is the grpc.ServiceDesc for MomentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MomentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.MomentService",
	HandlerType: (*MomentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _MomentService_Info_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _MomentService_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _MomentService_Edit_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MomentService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MomentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content/moment.service.proto",
}
