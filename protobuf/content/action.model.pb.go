// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: content/action.model.proto

package content

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	user "github.com/liov/tiga/protobuf/user"
	_ "github.com/liov/tiga/protobuf/utils/proto/patch"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Like struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	RefId     uint64             `protobuf:"varint,6,opt,name=refId,proto3" json:"refId,omitempty" gorm:"size:20;not null;index:idx_like_type_id" validate:"required" annotation:"相关id"`
	UserId    uint64             `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"用户id"`
	Type      ContentType        `protobuf:"varint,2,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" gorm:"type:int2;not null;index:idx_like_type_id" validate:"required" annotation:"相关类型"`
	Action    ActionType         `protobuf:"varint,3,opt,name=action,proto3,enum=content.ActionType" json:"action,omitempty" gorm:"type:int2;default:1" validate:"required" annotation:"动作"`
	User      *user.UserBaseInfo `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	CreatedAt string             `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt string             `protobuf:"bytes,26,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
}

func (x *Like) Reset() {
	*x = Like{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Like) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Like) ProtoMessage() {}

func (x *Like) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Like.ProtoReflect.Descriptor instead.
func (*Like) Descriptor() ([]byte, []int) {
	return file_content_action_model_proto_rawDescGZIP(), []int{0}
}

func (x *Like) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Like) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Like) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Like) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *Like) GetAction() ActionType {
	if x != nil {
		return x.Action
	}
	return ActionPlaceholder
}

func (x *Like) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Like) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Like) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

// 举报
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	RefId     uint64             `protobuf:"varint,6,opt,name=refId,proto3" json:"refId,omitempty" gorm:"size:20;not null;index:idx_report_type_id" validate:"required" annotation:"相关id"`
	UserId    uint64             `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"用户id"`
	Type      ContentType        `protobuf:"varint,12,opt,name=type,proto3,enum=content.ContentType" json:"type,omitempty" gorm:"type:int2;not null;index:idx_report_type_id" validate:"required" annotation:"相关类型"`
	User      *user.UserBaseInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	DelReason DelReason          `protobuf:"varint,3,opt,name=delReason,proto3,enum=content.DelReason" json:"delReason,omitempty" gorm:"type:int2;default:0" annotation:"举报原因"`
	Remark    string             `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty" gorm:"size:255;default:''" annotation:"备注"`
	CreatedAt string             `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_content_action_model_proto_rawDescGZIP(), []int{1}
}

func (x *Report) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Report) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Report) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Report) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *Report) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Report) GetDelReason() DelReason {
	if x != nil {
		return x.DelReason
	}
	return DelReasonPlaceholder
}

func (x *Report) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Report) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// 收藏
type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	RefId     uint64             `protobuf:"varint,6,opt,name=refId,proto3" json:"-" gorm:"size:20;not null;index:idx_collect_type_id" validate:"required" annotation:"相关id"`
	UserId    uint64             `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"用户id"`
	Type      ContentType        `protobuf:"varint,12,opt,name=type,proto3,enum=content.ContentType" json:"-" gorm:"type:int2;not null;index:idx_collect_type_id" validate:"required" annotation:"相关类型"`
	User      *user.UserBaseInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" gorm:"-" annotation:"用户"`
	FavId     uint64             `protobuf:"varint,3,opt,name=favId,proto3" json:"favId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"用户id"`
	CreatedAt string             `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt string             `protobuf:"bytes,26,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_content_action_model_proto_rawDescGZIP(), []int{2}
}

func (x *Collection) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Collection) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Collection) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Collection) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *Collection) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Collection) GetFavId() uint64 {
	if x != nil {
		return x.FavId
	}
	return 0
}

func (x *Collection) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Collection) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

// 系统删除内容记录
type ContentDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefId     uint64      `protobuf:"varint,2,opt,name=refId,proto3" json:"-" gorm:"size:20;default:0;primaryKey;autoIncrement:false" annotation:"相关id"`
	Type      ContentType `protobuf:"varint,1,opt,name=type,proto3,enum=content.ContentType" json:"-" gorm:"type:int2;default:0;primaryKey;autoIncrement:false" annotation:"类型"`
	DelReason DelReason   `protobuf:"varint,3,opt,name=delReason,proto3,enum=content.DelReason" json:"delReason,omitempty" gorm:"type:int2;default:0" annotation:"删除原因"`
	Remark    string      `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty" gorm:"size:255;default:''" annotation:"备注"`
	CreatedAt string      `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
}

func (x *ContentDel) Reset() {
	*x = ContentDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentDel) ProtoMessage() {}

func (x *ContentDel) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentDel.ProtoReflect.Descriptor instead.
func (*ContentDel) Descriptor() ([]byte, []int) {
	return file_content_action_model_proto_rawDescGZIP(), []int{3}
}

func (x *ContentDel) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *ContentDel) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *ContentDel) GetDelReason() DelReason {
	if x != nil {
		return x.DelReason
	}
	return DelReasonPlaceholder
}

func (x *ContentDel) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ContentDel) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// 评论
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey"`
	RefId       uint64             `protobuf:"varint,6,opt,name=refId,proto3" json:"-" gorm:"size:20;not null;index:idx_type_id" validate:"required" annotation:"相关id"`
	UserId      uint64             `protobuf:"varint,17,opt,name=userId,proto3" json:"userId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"用户id"`
	Type        ContentType        `protobuf:"varint,12,opt,name=type,proto3,enum=content.ContentType" json:"-" gorm:"size:1;not null;index:idx_type_id" validate:"required" annotation:"相关类型"`
	User        *user.UserBaseInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" gorm:"" annotation:"用户"`
	Content     string             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty" gorm:"size:255;not null" annotation:"内容"`
	Image       string             `protobuf:"bytes,13,opt,name=image,proto3" json:"image,omitempty" gorm:"size:255;not null" annotation:"图片"`
	ReplyId     uint64             `protobuf:"varint,7,opt,name=replyId,proto3" json:"replyId,omitempty" gorm:"size:20;default:0" annotation:"回复id"`
	RootId      uint64             `protobuf:"varint,8,opt,name=rootId,proto3" json:"rootId,omitempty" gorm:"size:20;default:0" annotation:"评论根id"`
	RecvUser    *user.UserBaseInfo `protobuf:"bytes,9,opt,name=recvUser,proto3" json:"recvUser,omitempty" gorm:"-" annotation:"接收人"`
	RecvId      uint64             `protobuf:"varint,10,opt,name=recvId,proto3" json:"recvId,omitempty" gorm:"size:20;not null;index" validate:"required" annotation:"接收人id"`
	Ext         *ContentExt        `protobuf:"bytes,30,opt,name=ext,proto3" json:"ext,omitempty" gorm:"-" annotation:"统计数据"`
	LikeId      uint64             `protobuf:"varint,32,opt,name=likeId,proto3" json:"likeId,omitempty" gorm:"-" annotation:"喜欢id,为0代表用户没有点喜欢"`
	UnlikeId    uint64             `protobuf:"varint,29,opt,name=unlikeId,proto3" json:"unlikeId,omitempty" gorm:"-" annotation:"不喜欢id,为0代表用户没有点喜欢"`
	Collects    []uint64           `protobuf:"varint,31,rep,packed,name=collects,proto3" json:"collects,omitempty" gorm:"-" annotation:"是否收藏"`
	SubComments []*Comment         `protobuf:"bytes,11,rep,name=subComments,proto3" json:"subComments,omitempty" gorm:"-" annotation:"子评论"`
	Sequence    uint32             `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty" gorm:"type:int2;default:0" annotation:"同级别的分类可根据sequence的值来排序，置顶"`
	CreatedAt   string             `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty" gorm:"type:timestamptz(6);default:now();index"`
	DeletedAt   string             `protobuf:"bytes,27,opt,name=deletedAt,proto3" json:"deletedAt,omitempty" gorm:"type:timestamptz(6);default:0001-01-01 00:00:00;index"`
	Status      uint32             `protobuf:"varint,28,opt,name=status,proto3" json:"status,omitempty" gorm:"type:int2;default:0"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_content_action_model_proto_rawDescGZIP(), []int{4}
}

func (x *Comment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *Comment) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Comment) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *Comment) GetUser() *user.UserBaseInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Comment) GetReplyId() uint64 {
	if x != nil {
		return x.ReplyId
	}
	return 0
}

func (x *Comment) GetRootId() uint64 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *Comment) GetRecvUser() *user.UserBaseInfo {
	if x != nil {
		return x.RecvUser
	}
	return nil
}

func (x *Comment) GetRecvId() uint64 {
	if x != nil {
		return x.RecvId
	}
	return 0
}

func (x *Comment) GetExt() *ContentExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Comment) GetLikeId() uint64 {
	if x != nil {
		return x.LikeId
	}
	return 0
}

func (x *Comment) GetUnlikeId() uint64 {
	if x != nil {
		return x.UnlikeId
	}
	return 0
}

func (x *Comment) GetCollects() []uint64 {
	if x != nil {
		return x.Collects
	}
	return nil
}

func (x *Comment) GetSubComments() []*Comment {
	if x != nil {
		return x.SubComments
	}
	return nil
}

func (x *Comment) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Comment) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Comment) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Comment) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ContentExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         ContentType `protobuf:"varint,2,opt,name=type,proto3,enum=content.ContentType" json:"-" gorm:"type:int2;not null;index:idx_content_type_id" validate:"required" annotation:"相关类型"`
	RefId        uint64      `protobuf:"varint,1,opt,name=refId,proto3" json:"-" gorm:"size:20;not null;index:idx_content_type_id" validate:"required" annotation:"相关id"`
	LikeCount    uint64      `protobuf:"varint,3,opt,name=likeCount,proto3" json:"likeCount,omitempty" gorm:"size:20;default:0" annotation:"点赞数"`
	BrowseCount  uint64      `protobuf:"varint,4,opt,name=browseCount,proto3" json:"browseCount,omitempty" gorm:"size:20;default:0" annotation:"浏览数"`
	UnlikeCount  uint64      `protobuf:"varint,5,opt,name=unlikeCount,proto3" json:"unlikeCount,omitempty" gorm:"size:20;default:0" annotation:"不喜欢数"`
	ReportCount  uint64      `protobuf:"varint,6,opt,name=reportCount,proto3" json:"reportCount,omitempty" gorm:"size:20;default:0" annotation:"举报数"`
	CommentCount uint64      `protobuf:"varint,7,opt,name=commentCount,proto3" json:"commentCount,omitempty" gorm:"size:20;default:0" annotation:"评论数"`
	CollectCount uint64      `protobuf:"varint,8,opt,name=collectCount,proto3" json:"collectCount,omitempty" gorm:"size:20;default:0" annotation:"收藏数"`
}

func (x *ContentExt) Reset() {
	*x = ContentExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_action_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentExt) ProtoMessage() {}

func (x *ContentExt) ProtoReflect() protoreflect.Message {
	mi := &file_content_action_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentExt.ProtoReflect.Descriptor instead.
func (*ContentExt) Descriptor() ([]byte, []int) {
	return file_content_action_model_proto_rawDescGZIP(), []int{5}
}

func (x *ContentExt) GetType() ContentType {
	if x != nil {
		return x.Type
	}
	return ContentPlaceholder
}

func (x *ContentExt) GetRefId() uint64 {
	if x != nil {
		return x.RefId
	}
	return 0
}

func (x *ContentExt) GetLikeCount() uint64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *ContentExt) GetBrowseCount() uint64 {
	if x != nil {
		return x.BrowseCount
	}
	return 0
}

func (x *ContentExt) GetUnlikeCount() uint64 {
	if x != nil {
		return x.UnlikeCount
	}
	return 0
}

func (x *ContentExt) GetReportCount() uint64 {
	if x != nil {
		return x.ReportCount
	}
	return 0
}

func (x *ContentExt) GetCommentCount() uint64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *ContentExt) GetCollectCount() uint64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

var File_content_action_model_proto protoreflect.FileDescriptor

var file_content_action_model_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x06, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x28, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01,
	0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x75, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x5f, 0xd2, 0xb5, 0x03, 0x5b, 0xa2, 0x01, 0x58, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20,
	0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x6c,
	0x69, 0x6b, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8,
	0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x66, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4e, 0xd2,
	0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x65, 0xd2, 0xb5, 0x03, 0x61,
	0xa2, 0x01, 0x5e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e,
	0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x49, 0xd2, 0xb5,
	0x03, 0x45, 0xa2, 0x01, 0x42, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x31, 0x22, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0x22, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36,
	0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a,
	0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x87, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03,
	0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x77, 0x0a, 0x05, 0x72, 0x65, 0x66,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x61, 0xd2, 0xb5, 0x03, 0x5d, 0xa2, 0x01,
	0x5a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e,
	0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64,
	0x78, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x66, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x4e, 0xd2, 0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c,
	0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69,
	0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x67, 0xd2, 0xb5, 0x03, 0x63, 0xa2, 0x01, 0x60, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c,
	0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85,
	0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x22, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31,
	0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35,
	0x35, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8,
	0x22, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5,
	0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xab,
	0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2,
	0x01, 0x11, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x6b, 0xd2, 0xb5, 0x03, 0x67, 0xa2, 0x01, 0x64,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85,
	0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4e, 0xd2, 0xb5, 0x03,
	0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32,
	0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x71, 0xd2, 0xb5, 0x03, 0x6d, 0xa2, 0x01,
	0x6a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75,
	0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b,
	0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x23, 0xd2, 0xb5, 0x03, 0x1f, 0xa2, 0x01, 0x1c, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x64,
	0x0a, 0x05, 0x66, 0x61, 0x76, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4e, 0xd2,
	0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65,
	0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x05, 0x66,
	0x61, 0x76, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xd2, 0xb5,
	0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x2d, 0x30,
	0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9e, 0x04, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x73, 0x0a, 0x05, 0x72,
	0x65, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x5d, 0xd2, 0xb5, 0x03, 0x59,
	0xa2, 0x01, 0x56, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x3b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x61,
	0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22,
	0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64,
	0x12, 0x87, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x5d, 0xd2, 0xb5, 0x03, 0x59, 0xa2, 0x01, 0x56, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x3b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x3b, 0x61, 0x75, 0x74, 0x6f,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22,
	0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x3b, 0xd2, 0xb5, 0x03, 0x37, 0xa2, 0x01, 0x34, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x22, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2,
	0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35,
	0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x27, 0x27, 0x22, 0x20, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xa4, 0x87, 0xe6, 0xb3, 0xa8, 0x22,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03,
	0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb0, 0x0e,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xd2, 0xb5, 0x03, 0x14, 0xa2, 0x01, 0x11, 0x67, 0x6f,
	0x72, 0x6d, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x79, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x63, 0xd2, 0xb5, 0x03, 0x5f, 0xa2, 0x01, 0x5c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32,
	0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x3a, 0x69, 0x64, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b,
	0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x12, 0x66,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4e,
	0xd2, 0xb5, 0x03, 0x4a, 0xa2, 0x01, 0x47, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x69, 0x64, 0x22, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x66, 0xd2, 0xb5, 0x03,
	0x62, 0xa2, 0x01, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75,
	0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x22, 0xd2, 0xb5, 0x03,
	0x1e, 0xa2, 0x01, 0x1b, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x22, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x6e, 0x6f,
	0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x33, 0xd2, 0xb5, 0x03, 0x2f, 0xa2, 0x01, 0x2c, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x35, 0x35, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e,
	0x75, 0x6c, 0x6c, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0x22, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x4f, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x35, 0xd2, 0xb5, 0x03, 0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x9b,
	0x9e, 0xe5, 0xa4, 0x8d, 0x69, 0x64, 0x22, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x12, 0x50, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x38, 0xd2, 0xb5, 0x03, 0x34, 0xa2, 0x01, 0x31, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73,
	0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30,
	0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xaf,
	0x84, 0xe8, 0xae, 0xba, 0xe6, 0xa0, 0xb9, 0x69, 0x64, 0x22, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x22, 0xa2, 0x01,
	0x1f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6, 0xe4, 0xba, 0xba, 0x22,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x76, 0x55, 0x73, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x76, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x51, 0xd2, 0xb5, 0x03, 0x4d,
	0xa2, 0x01, 0x4a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30,
	0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe6, 0x8e, 0xa5, 0xe6, 0x94, 0xb6, 0xe4, 0xba, 0xba, 0x69, 0x64, 0x22, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x76, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x42, 0x29, 0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0x22, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x42, 0x45, 0xd2, 0xb5, 0x03, 0x41, 0xa2, 0x01, 0x3e,
	0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x69, 0x64, 0x2c, 0xe4, 0xb8,
	0xba, 0x30, 0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0xb2,
	0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0x82, 0xb9, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x22, 0x52, 0x06,
	0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65,
	0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x48, 0xd2, 0xb5, 0x03, 0x44, 0xa2, 0x01,
	0x41, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xb8, 0x8d, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0x69,
	0x64, 0x2c, 0xe4, 0xb8, 0xba, 0x30, 0xe4, 0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0x82, 0xb9, 0xe5, 0x96, 0x9c, 0xe6, 0xac,
	0xa2, 0x22, 0x52, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x04, 0x42, 0x29,
	0xd2, 0xb5, 0x03, 0x25, 0xa2, 0x01, 0x22, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x98, 0xaf, 0xe5,
	0x90, 0xa6, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0x22, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x26, 0xd2, 0xb5, 0x03, 0x22,
	0xa2, 0x01, 0x1f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe5, 0xad, 0x90, 0xe8, 0xaf, 0x84, 0xe8, 0xae,
	0xba, 0x22, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x86, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x6a, 0xd2, 0xb5, 0x03, 0x66, 0xa2, 0x01, 0x63, 0x67, 0x6f, 0x72, 0x6d, 0x3a,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe5, 0x90, 0x8c, 0xe7, 0xba, 0xa7, 0xe5, 0x88, 0xab, 0xe7, 0x9a, 0x84, 0xe5, 0x88,
	0x86, 0xe7, 0xb1, 0xbb, 0xe5, 0x8f, 0xaf, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0xe7, 0x9a, 0x84, 0xe5, 0x80, 0xbc, 0xe6, 0x9d, 0xa5, 0xe6, 0x8e,
	0x92, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb6, 0x22, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xd2, 0xb5, 0x03,
	0x31, 0xa2, 0x01, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28, 0x36, 0x29, 0x3b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x6e, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x43, 0xd2, 0xb5, 0x03, 0x3f, 0xa2, 0x01, 0x3c, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x74, 0x7a, 0x28,
	0x36, 0x29, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x30, 0x30, 0x31, 0x2d,
	0x30, 0x31, 0x2d, 0x30, 0x31, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x26, 0xd2, 0xb5, 0x03, 0x1d, 0xa2, 0x01, 0x1a, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x30, 0x22, 0x92, 0x41, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xcd, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x12,
	0x9b, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x71, 0xd2, 0xb5, 0x03, 0x6d, 0xa2, 0x01, 0x6a, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x69, 0x6e, 0x74, 0x32, 0x3b, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x81, 0x01,
	0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x6b, 0xd2,
	0xb5, 0x03, 0x67, 0xa2, 0x01, 0x64, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x20, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x6e, 0x6f, 0x74,
	0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x69, 0x64, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0x69, 0x64, 0x22, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x36, 0xd2, 0xb5, 0x03, 0x32, 0xa2, 0x01, 0x2f, 0x67, 0x6f, 0x72,
	0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x22, 0xe7, 0x82, 0xb9, 0xe8, 0xb5, 0x9e, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x36, 0xd2, 0xb5,
	0x03, 0x32, 0xa2, 0x01, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a,
	0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0xb5, 0x8f, 0xe8, 0xa7, 0x88,
	0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x39, 0xd2, 0xb5, 0x03, 0x35, 0xa2, 0x01, 0x32, 0x67,
	0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x22, 0xe4, 0xb8, 0x8d, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe6, 0x95, 0xb0,
	0x22, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x36, 0xd2, 0xb5, 0x03, 0x32, 0xa2, 0x01, 0x2f, 0x67, 0x6f, 0x72, 0x6d,
	0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x22, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x36,
	0xd2, 0xb5, 0x03, 0x32, 0xa2, 0x01, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a,
	0x65, 0x3a, 0x32, 0x30, 0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe8, 0xaf, 0x84, 0xe8,
	0xae, 0xba, 0xe6, 0x95, 0xb0, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x36, 0xd2, 0xb5, 0x03, 0x32,
	0xa2, 0x01, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x3a, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x32, 0x30,
	0x3b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x30, 0x22, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0xe6, 0x94, 0xb6, 0xe8, 0x97, 0x8f, 0xe6, 0x95,
	0xb0, 0x22, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x47, 0x0a, 0x1a, 0x78, 0x79, 0x7a, 0x2e, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6f, 0x76, 0x2f,
	0x68, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_content_action_model_proto_rawDescOnce sync.Once
	file_content_action_model_proto_rawDescData = file_content_action_model_proto_rawDesc
)

func file_content_action_model_proto_rawDescGZIP() []byte {
	file_content_action_model_proto_rawDescOnce.Do(func() {
		file_content_action_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_action_model_proto_rawDescData)
	})
	return file_content_action_model_proto_rawDescData
}

var file_content_action_model_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_content_action_model_proto_goTypes = []interface{}{
	(*Like)(nil),              // 0: content.Like
	(*Report)(nil),            // 1: content.Report
	(*Collection)(nil),        // 2: content.Collection
	(*ContentDel)(nil),        // 3: content.ContentDel
	(*Comment)(nil),           // 4: content.Comment
	(*ContentExt)(nil),        // 5: content.ContentExt
	(ContentType)(0),          // 6: content.ContentType
	(ActionType)(0),           // 7: content.ActionType
	(*user.UserBaseInfo)(nil), // 8: user.UserBaseInfo
	(DelReason)(0),            // 9: content.DelReason
}
var file_content_action_model_proto_depIdxs = []int32{
	6,  // 0: content.Like.type:type_name -> content.ContentType
	7,  // 1: content.Like.action:type_name -> content.ActionType
	8,  // 2: content.Like.user:type_name -> user.UserBaseInfo
	6,  // 3: content.Report.type:type_name -> content.ContentType
	8,  // 4: content.Report.user:type_name -> user.UserBaseInfo
	9,  // 5: content.Report.delReason:type_name -> content.DelReason
	6,  // 6: content.Collection.type:type_name -> content.ContentType
	8,  // 7: content.Collection.user:type_name -> user.UserBaseInfo
	6,  // 8: content.ContentDel.type:type_name -> content.ContentType
	9,  // 9: content.ContentDel.delReason:type_name -> content.DelReason
	6,  // 10: content.Comment.type:type_name -> content.ContentType
	8,  // 11: content.Comment.user:type_name -> user.UserBaseInfo
	8,  // 12: content.Comment.recvUser:type_name -> user.UserBaseInfo
	5,  // 13: content.Comment.ext:type_name -> content.ContentExt
	4,  // 14: content.Comment.subComments:type_name -> content.Comment
	6,  // 15: content.ContentExt.type:type_name -> content.ContentType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_content_action_model_proto_init() }
func file_content_action_model_proto_init() {
	if File_content_action_model_proto != nil {
		return
	}
	file_content_action_enum_proto_init()
	file_content_content_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_content_action_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Like); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_action_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_action_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_content_action_model_proto_goTypes,
		DependencyIndexes: file_content_action_model_proto_depIdxs,
		MessageInfos:      file_content_action_model_proto_msgTypes,
	}.Build()
	File_content_action_model_proto = out.File
	file_content_action_model_proto_rawDesc = nil
	file_content_action_model_proto_goTypes = nil
	file_content_action_model_proto_depIdxs = nil
}
