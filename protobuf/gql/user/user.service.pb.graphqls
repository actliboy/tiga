# Code generated by protoc-gen-gogql. DO NOT EDIT
# source: user/user.service.proto

scalar Bytes

scalar Int64

scalar Uint32

scalar Uint64

# map with key: 'String!' and value: 'String!'
scalar HttpResponse_HeaderEntry

input OauthReq {
	responseType: String!  
	clientID: String!  
	scope: String!  
	redirectURI: String!  
	state: String!  
	userID: String!  
	accessTokenExp: Int64!  
	clientSecret: String!  
	code: String!  
	refreshToken: String!  
	grantType: String!  
	accessType: String!  
	loginURI: String!  
}

input ActionLogListReq {
	startTime: String!  
	endTime: String!  
}

input ActiveReq {
	id: Uint64!  
	secret: String!  
}

input EditReq {
	id: Uint64!  
	details: EditReq_EditDetails  
}

input EditReq_EditDetails {
	name: String!  
	password: String!  
	mail: String!  
	phone: String!  
	gender: Gender!  
	birthday: String!  
	address: String!  
	introduction: String!  
	signature: String!  
	avatarURL: String!  
	coverURL: String!  
	eduExps: [Resume!]  
	workExps: [Resume!]  
}

input GetReq {
	id: Uint64!  
}

input LoginReq {
	input: String!  
	password: String!  
	vCode: String!  
}

input ResetPasswordReq {
	id: Uint64!  
	secret: String!  
	password: String!  
}

input Resume {
	id: Uint64!  
	userId: Uint64!  
	company: String!  
	title: String!  
	department: String!  
	startTime: String!  
	endTime: String!  
	remark: String!  
	type: Uint32!  
	status: Uint32!  
}

input SendVerifyCodeReq {
	mail: String!  
	phone: String!  
	type: Action!  
}

input SignupReq {
	password: String!  
	name: String!  
	gender: Gender!  
	mail: String!  
	phone: String!  
	vCode: String!  
}

input SingUpVerifyReq {
	mail: String!  
	phone: String!  
}

type CommonRep {
	code: Uint32! 
	message: String! 
	details: String! 
}

type HttpResponse {
	header: HttpResponse_HeaderEntry 
	body: Bytes! 
	statusCode: Uint32! 
}

type TinyRep {
	code: Uint32! 
	message: String! 
}

type ActionLogListRep {
	code: Uint32! 
	message: String! 
	details: [UserActionLog!] 
}

type GetRep {
	code: Uint32! 
	message: String! 
	details: User 
}

type LoginRep {
	code: Uint32! 
	message: String! 
	details: LoginRep_LoginDetails 
	cookie: String! 
}

type LoginRep_LoginDetails {
	user: UserBaseInfo 
	token: String! 
}

type LogoutRep {
	code: Uint32! 
	message: String! 
	cookie: String! 
}

type User {
	id: Uint64! 
	name: String! 
	account: String! 
	activatedAt: String! 
	password: String! 
	mail: String! 
	phone: String! 
	gender: Gender! 
	birthday: String! 
	location: String! 
	address: String! 
	introduction: String! 
	signature: String! 
	avatarURL: String! 
	coverURL: String! 
	lastActivatedAt: String! 
	score: Uint64! 
	role: Role! 
	createdAt: String! 
	status: UserStatus! 
}

type UserActionLog {
	id: Uint64! 
	userId: Uint64! 
	action: Action! 
	relatedId: String! 
	lastValue: Bytes! 
	createdAt: String! 
	remark: String! 
	device: UserDeviceInfo 
}

type UserAuthInfo {
	id: Uint64! 
	name: String! 
	nickName: String! 
	mail: String! 
	location: String! 
	introduction: String! 
	avatarURL: String! 
}

type UserBaseInfo {
	id: Uint64! 
	score: Uint64! 
	gender: Gender! 
}

type UserDeviceInfo {
	device: String! 
	os: String! 
	appCode: String! 
	appVersion: String! 
	iP: String! 
	lng: String! 
	lat: String! 
	area: String! 
	userAgent: String! 
}

enum Action {
	Signup
	Active
	RestPassword
	EditPassword
	CreateResume
	EditResume
	DELETEResume
}

enum Gender {
	GenderUnfilled
	GenderMale
	GenderFemale
}

enum Role {
	UserRoleNormal
	UserRoleAdmin
	UserRoleSuperAdmin
}

enum UserStatus {
	InActive
	Activated
	Frozen
}

type Mutation {
	signupVerify(in: SingUpVerifyReq): TinyRep
	signup(in: SignupReq): TinyRep
	active(in: ActiveReq): TinyRep
	edit(in: EditReq): TinyRep
	forgetPassword(in: LoginReq): TinyRep
	resetPassword(in: ResetPasswordReq): TinyRep
}

type Query {
	verifyCode: CommonRep
	sendVerifyCode(in: SendVerifyCodeReq): CommonRep
	login(in: LoginReq): LoginRep
	logout: LogoutRep
	authInfo: UserAuthInfo
	getUser(in: GetReq): GetRep
	actionLogList(in: ActionLogListReq): ActionLogListRep
	oauthAuthorize(in: OauthReq): HttpResponse
	oauthToken(in: OauthReq): HttpResponse
}

